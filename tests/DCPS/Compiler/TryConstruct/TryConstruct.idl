/*
 *
 *
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

//bounded string definitions for trim
typedef string<20> str20;
typedef wstring<20> wstr20;
typedef string<64> str64;
typedef wstring<64> wstr64;

typedef sequence<@try_construct(USE_DEFAULT) str20> BoundStringSeq_ud;
typedef sequence<@try_construct(TRIM) str20> BoundStringSeq_t;
typedef sequence<@try_construct(DISCARD) str20> BoundStringSeq_d;
typedef sequence<@try_construct(USE_DEFAULT) wstr20> BoundWStringSeq_ud;
typedef sequence<@try_construct(TRIM) wstr20> BoundWStringSeq_t;
typedef sequence<@try_construct(DISCARD) wstr20> BoundWStringSeq_d;

//array for use in struct, union, and sequence
typedef short ShortArray[10];
typedef str64 str64Array[15];
typedef str20 str20Array[10];

//enum for use in struct, union, and sequence
enum EnumType {VALUE1, VALUE2};

//nested union for use in struct, union, and sequence
union NestedUnion switch (EnumType) {
  case VALUE1: boolean u_b;
  case VALUE2: short u_s;
  default: float u_f;
};

//sequences
//enum
typedef sequence<EnumType> EnumSeqUnbound;
typedef sequence<EnumType, 2> EnumSeqBound;
typedef sequence<EnumType, 3> EnumSeqBound2;
//primitives
typedef sequence<short> ShortSeqUnbound;
typedef sequence<short, 2> ShortSeqBound;
typedef sequence<short, 3> ShortSeqBound2;
typedef sequence<unsigned short> UnsignedShortSeqUnbound;
typedef sequence<unsigned short, 2> UnsignedShortSeqBound;
typedef sequence<unsigned short, 3> UnsignedShortSeqBound2;
//string
typedef sequence<str64> StringSeqUnbound;
typedef sequence<str64, 2> StringSeqBound;
typedef sequence<str64, 3> StringSeqBound2;
//wstring
typedef sequence<wstr64> WideStringSeqUnbound;
typedef sequence<wstr64, 2> WideStringSeqBound;
typedef sequence<wstr64, 3> WideStringSeqBound2;
//array
typedef sequence<ShortArray> ShortArraySeqUnbound;
typedef sequence<ShortArray, 2> ShortArraySeqBound;
typedef sequence<ShortArray, 3> ShortArraySeqBound2;
//sequence
typedef sequence<ShortSeqUnbound> SeqShortSeqUnboundUnbound;
typedef sequence<ShortSeqUnbound, 2> SeqShortSeqUnboundBound;
typedef sequence<ShortSeqUnbound, 3> SeqShortSeqUnboundBound2;
typedef sequence<ShortSeqBound> SeqShortSeqBoundUnbound;
typedef sequence<ShortSeqBound2> SeqShortSeqBoundUnbound2;
typedef sequence<ShortSeqBound, 2> SeqShortSeqBoundBound;
typedef sequence<ShortSeqBound2, 3> SeqShortSeqBoundBound2;

//nested struct for use in struct, union, and sequence
@mutable
@OpenDDS::data_representation(XCDR1)
struct NestedStruct {
  // @try_construct(DISCARD) ShortArray sa_d;
  // @try_construct(USE_DEFAULT) ShortArray sa_ud;
  // @try_construct(TRIM) ShortArray sa_t;
  @try_construct(DISCARD) str64 str64_d;
  @try_construct(USE_DEFAULT) str64 str64_ud;
  @try_construct(TRIM) str64 str64_t;
};
@mutable
@OpenDDS::data_representation(XCDR1)
struct NestedStructTrim {
  @try_construct(DISCARD) str20 str20_d;
  @try_construct(USE_DEFAULT) str20 str20_ud;
  @try_construct(TRIM) str20 str20_t;
};
//struct
typedef sequence<NestedStruct> StructSeqUnbound;
typedef sequence<NestedStructTrim> StructSeqUnboundTrim;
typedef sequence<NestedStruct, 2> StructSeqBound;
typedef sequence<NestedStructTrim, 2> StructSeqBoundTrim;
typedef sequence<NestedStruct, 3> StructSeqBound2;

//union
typedef sequence<NestedUnion> UnionSeqUnbound;
typedef sequence<NestedUnion, 2> UnionSeqBound;
typedef sequence<NestedUnion, 3> UnionSeqBound2;

//nested struct for use in struct, union, and sequence
struct NestedStruct2 {
  @try_construct(USE_DEFAULT) wstr64 wstr64_ud;
  @try_construct(USE_DEFAULT) ShortSeqUnbound psu_ud;
  @try_construct(USE_DEFAULT) ShortSeqBound psb_ud;
  @try_construct(USE_DEFAULT) UnsignedShortSeqUnbound upsu_ud;
  @try_construct(USE_DEFAULT) UnsignedShortSeqBound upsb_ud;
  @try_construct(USE_DEFAULT) EnumSeqUnbound esu_ud;
  @try_construct(USE_DEFAULT) EnumSeqBound esb_ud;
  @try_construct(USE_DEFAULT) StringSeqUnbound strsu_ud;
  @try_construct(USE_DEFAULT) StringSeqBound strsb_ud;
  @try_construct(USE_DEFAULT) WideStringSeqUnbound wstrsu_ud;
  @try_construct(USE_DEFAULT) WideStringSeqBound wstrsb_ud;
  @try_construct(USE_DEFAULT) StructSeqUnbound ssu_ud;
  @try_construct(USE_DEFAULT) StructSeqBound ssb_ud;
  @try_construct(USE_DEFAULT) ShortArraySeqUnbound sasu_ud;
  @try_construct(USE_DEFAULT) ShortArraySeqBound sasb_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqUnboundUnbound sssuu_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqUnboundBound sssub_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqBoundUnbound sssbu_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqBoundBound sssbb_ud;
  @try_construct(USE_DEFAULT) UnionSeqUnbound usu_ud;
  @try_construct(USE_DEFAULT) UnionSeqBound usb_ud;
  @try_construct(USE_DEFAULT) NestedStruct ns_ud;
  @try_construct(USE_DEFAULT) NestedUnion nu_ud;
  @try_construct(USE_DEFAULT) ShortArray sa_mud;
  @try_construct(USE_DEFAULT) EnumType e_ud;
  @try_construct(USE_DEFAULT) octet by_ud;
  @try_construct(USE_DEFAULT) boolean bo_ud;
  @try_construct(USE_DEFAULT) short s_ud;
  @try_construct(USE_DEFAULT) unsigned short us_ud;
  @try_construct(DISCARD) str64 str64_d;
  @try_construct(USE_DEFAULT) str64 str64_ud;
  @try_construct(TRIM) str64 str64_t;
};
//nested struct for use in struct, union, and sequence
struct NestedStruct3 {
  @try_construct(USE_DEFAULT) wstr64 wstr64_ud;
  @try_construct(USE_DEFAULT) ShortSeqUnbound psu_ud;
  @try_construct(USE_DEFAULT) ShortSeqBound psb_ud;
  @try_construct(USE_DEFAULT) UnsignedShortSeqUnbound upsu_ud;
  @try_construct(USE_DEFAULT) UnsignedShortSeqBound upsb_ud;
  @try_construct(USE_DEFAULT) EnumSeqUnbound esu_ud;
  @try_construct(USE_DEFAULT) EnumSeqBound esb_ud;
  @try_construct(USE_DEFAULT) StringSeqUnbound strsu_ud;
  @try_construct(USE_DEFAULT) StringSeqBound strsb_ud;
  @try_construct(USE_DEFAULT) WideStringSeqUnbound wstrsu_ud;
  @try_construct(USE_DEFAULT) WideStringSeqBound wstrsb_ud;
  @try_construct(USE_DEFAULT) StructSeqUnbound ssu_ud;
  @try_construct(USE_DEFAULT) StructSeqBound ssb_ud;
  @try_construct(USE_DEFAULT) ShortArraySeqUnbound sasu_ud;
  @try_construct(USE_DEFAULT) ShortArraySeqBound sasb_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqUnboundUnbound sssuu_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqUnboundBound sssub_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqBoundUnbound sssbu_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqBoundBound sssbb_ud;
  @try_construct(USE_DEFAULT) UnionSeqUnbound usu_ud;
  @try_construct(USE_DEFAULT) UnionSeqBound usb_ud;
  @try_construct(USE_DEFAULT) NestedStruct ns_ud;
  @try_construct(USE_DEFAULT) NestedUnion nu_ud;
  @try_construct(USE_DEFAULT) ShortArray sa_mud;
  @try_construct(USE_DEFAULT) EnumType e_ud;
  @try_construct(USE_DEFAULT) octet by_ud;
  @try_construct(USE_DEFAULT) boolean bo_ud;
  @try_construct(USE_DEFAULT) short s_ud;
  @try_construct(USE_DEFAULT) unsigned short us_ud;
  @try_construct(DISCARD) str20 str20_d;
  @try_construct(USE_DEFAULT) str20 str20_ud;
  @try_construct(TRIM) str20 str20_t;
};


module TryCon {
@topic
  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct Mutable_Message {
    //strings and wstrings
    @try_construct(DISCARD) str64 str64_d;
    @try_construct(USE_DEFAULT) str64 str64_ud;
    @try_construct(TRIM) str64 str64_t;
    @try_construct(DISCARD) wstr64 wstr64_d;
    @try_construct(USE_DEFAULT) wstr64 wstr64_ud;
    @try_construct(TRIM) wstr64 wstr64_t;

    //sequences
    //primitive seqs
    @try_construct(DISCARD) ShortSeqUnbound psu_d;
    @try_construct(USE_DEFAULT) ShortSeqUnbound psu_ud;
    @try_construct(TRIM) ShortSeqUnbound psu_t;
    @try_construct(DISCARD) ShortSeqBound psb_d;
    @try_construct(USE_DEFAULT) ShortSeqBound psb_ud;
    @try_construct(TRIM) ShortSeqBound psb_t;
    @try_construct(DISCARD) UnsignedShortSeqUnbound upsu_d;
    @try_construct(USE_DEFAULT) UnsignedShortSeqUnbound upsu_ud;
    @try_construct(TRIM) UnsignedShortSeqUnbound upsu_t;
    @try_construct(DISCARD) UnsignedShortSeqBound upsb_d;
    @try_construct(USE_DEFAULT) UnsignedShortSeqBound upsb_ud;
    @try_construct(TRIM) UnsignedShortSeqBound upsb_t;
    //enum seqs
    @try_construct(DISCARD) EnumSeqUnbound esu_d;
    @try_construct(USE_DEFAULT) EnumSeqUnbound esu_ud;
    @try_construct(TRIM) EnumSeqUnbound esu_t;
    @try_construct(DISCARD) EnumSeqBound esb_d;
    @try_construct(USE_DEFAULT) EnumSeqBound esb_ud;
    @try_construct(TRIM) EnumSeqBound esb_t;
    //string seqs
    @try_construct(DISCARD) StringSeqUnbound strsu_d;
    @try_construct(USE_DEFAULT) StringSeqUnbound strsu_ud;
    @try_construct(TRIM) StringSeqUnbound strsu_t;
    @try_construct(DISCARD) StringSeqBound strsb_d;
    @try_construct(USE_DEFAULT) StringSeqBound strsb_ud;
    @try_construct(TRIM) StringSeqBound strsb_t;
    //wstring seqs
    @try_construct(DISCARD) WideStringSeqUnbound wstrsu_d;
    @try_construct(USE_DEFAULT) WideStringSeqUnbound wstrsu_ud;
    @try_construct(TRIM) WideStringSeqUnbound wstrsu_t;
    @try_construct(DISCARD) WideStringSeqBound wstrsb_d;
    @try_construct(USE_DEFAULT) WideStringSeqBound wstrsb_ud;
    @try_construct(TRIM) WideStringSeqBound wstrsb_t;
    //struct seqs
    @try_construct(DISCARD) StructSeqUnbound ssu_d;
    @try_construct(USE_DEFAULT) StructSeqUnbound ssu_ud;
    @try_construct(TRIM) StructSeqUnbound ssu_t;
    @try_construct(DISCARD) StructSeqBound ssb_d;
    @try_construct(USE_DEFAULT) StructSeqBound ssb_ud;
    @try_construct(TRIM) StructSeqBound ssb_t;
    //array seqs
    @try_construct(DISCARD) ShortArraySeqUnbound sasu_d;
    @try_construct(USE_DEFAULT) ShortArraySeqUnbound sasu_ud;
    @try_construct(TRIM) ShortArraySeqUnbound sasu_t;
    @try_construct(DISCARD) ShortArraySeqBound sasb_d;
    @try_construct(USE_DEFAULT) ShortArraySeqBound sasb_ud;
    @try_construct(TRIM) ShortArraySeqBound sasb_t;
    //seq seqs
    @try_construct(DISCARD) SeqShortSeqUnboundUnbound sssuu_d;
    @try_construct(USE_DEFAULT) SeqShortSeqUnboundUnbound sssuu_ud;
    @try_construct(TRIM) SeqShortSeqUnboundUnbound sssuu_t;
    @try_construct(DISCARD) SeqShortSeqUnboundBound sssub_d;
    @try_construct(USE_DEFAULT) SeqShortSeqUnboundBound sssub_ud;
    @try_construct(TRIM) SeqShortSeqUnboundBound sssub_t;
    @try_construct(DISCARD) SeqShortSeqBoundUnbound sssbu_d;
    @try_construct(USE_DEFAULT) SeqShortSeqBoundUnbound sssbu_ud;
    @try_construct(TRIM) SeqShortSeqBoundUnbound sssbu_t;
    @try_construct(DISCARD) SeqShortSeqBoundBound sssbb_d;
    @try_construct(USE_DEFAULT) SeqShortSeqBoundBound sssbb_ud;
    @try_construct(TRIM) SeqShortSeqBoundBound sssbb_t;
    //union seqs
    @try_construct(DISCARD) UnionSeqUnbound usu_d;
    @try_construct(USE_DEFAULT) UnionSeqUnbound usu_ud;
    @try_construct(TRIM) UnionSeqUnbound usu_t;
    @try_construct(DISCARD) UnionSeqBound usb_d;
    @try_construct(USE_DEFAULT) UnionSeqBound usb_ud;
    @try_construct(TRIM) UnionSeqBound usb_t;

    //struct and union
    @try_construct(DISCARD) NestedStruct ns_d;
    @try_construct(USE_DEFAULT) NestedStruct ns_ud;
    @try_construct(TRIM) NestedStruct ns_t;
    @try_construct(DISCARD) NestedUnion nu_d;
    @try_construct(USE_DEFAULT) NestedUnion nu_ud;
    @try_construct(TRIM) NestedUnion nu_t;

    //array
    @try_construct(DISCARD) ShortArray sa_md;
    @try_construct(USE_DEFAULT) ShortArray sa_mud;
    @try_construct(TRIM) ShortArray sa_mt;

    //enum
    @try_construct(DISCARD) EnumType e_d;
    @try_construct(USE_DEFAULT) EnumType e_ud;
    @try_construct(TRIM) EnumType e_t;

    //primitives
    //byte
    @try_construct(DISCARD) octet by_d;
    @try_construct(USE_DEFAULT) octet by_ud;
    @try_construct(TRIM) octet by_t;
    //boolean
    @try_construct(DISCARD) boolean bo_d;
    @try_construct(USE_DEFAULT) boolean bo_ud;
    @try_construct(TRIM) boolean bo_t;
    //integer types  
    @try_construct(DISCARD) short s_d;
    @try_construct(USE_DEFAULT) short s_ud;
    @try_construct(TRIM) short s_t;
    @try_construct(DISCARD) unsigned short us_d;
    @try_construct(USE_DEFAULT) unsigned short us_ud;
    @try_construct(TRIM) unsigned short us_t;
  };

  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct StringTest1 {
    str64 str64_d;
    str64 str64_ud;
    str64 str64_t;
  };

  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct StringTest2 {
    @try_construct(DISCARD) str20 str20_d;
    @try_construct(USE_DEFAULT) str20 str20_ud;
    @try_construct(TRIM) str20 str20_t;
  };

  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct NestedStructTest1{
    NestedStruct2 ns;
  };

  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct NestedStructTest2{
    @try_construct(USE_DEFAULT) NestedStruct3 ns;
  };

  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct TrimStruct1 {
    str64 str64_t;
    wstr64 wstr64_t;
    ShortSeqUnbound psu_t;
    ShortSeqBound2 psb_t;
    UnsignedShortSeqUnbound upsu_t;
    UnsignedShortSeqBound2 upsb_t;
    EnumSeqUnbound esu_t;
    EnumSeqBound2 esb_t;
    StringSeqUnbound strsu_t;
    StringSeqBound2 strsb_t;
    WideStringSeqUnbound wstrsu_t;
    WideStringSeqBound2 wstrsb_t;
    StructSeqUnbound ssu_t;
    StructSeqBound2 ssb_t;
    ShortArraySeqUnbound sasu_t;
    ShortArraySeqBound2 sasb_t;
    SeqShortSeqUnboundUnbound sssuu_t;
    SeqShortSeqUnboundBound2 sssub_t;
    SeqShortSeqBoundUnbound2 sssbu_t;
    SeqShortSeqBoundBound2 sssbb_t;
    UnionSeqUnbound usu_t;
    UnionSeqBound2 usb_t;
  };

  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct TrimStruct2 {
    @try_construct(TRIM) str20 str20_t;
    @try_construct(TRIM) wstr20 wstr20_t;
    @try_construct(TRIM) ShortSeqUnbound psu_t;
    @try_construct(TRIM) ShortSeqBound psb_t;
    @try_construct(TRIM) UnsignedShortSeqUnbound upsu_t;
    @try_construct(TRIM) UnsignedShortSeqBound upsb_t;
    @try_construct(TRIM) EnumSeqUnbound esu_t;
    @try_construct(TRIM) EnumSeqBound esb_t;
    @try_construct(TRIM) StringSeqUnbound strsu_t;
    @try_construct(TRIM) StringSeqBound strsb_t;
    @try_construct(TRIM) WideStringSeqUnbound wstrsu_t;
    @try_construct(TRIM) WideStringSeqBound wstrsb_t;
    @try_construct(TRIM) StructSeqUnboundTrim ssu_t;
    @try_construct(TRIM) StructSeqBoundTrim ssb_t;
    @try_construct(TRIM) ShortArraySeqUnbound sasu_t;
    @try_construct(TRIM) ShortArraySeqBound sasb_t;
    @try_construct(TRIM) SeqShortSeqUnboundUnbound sssuu_t;
    @try_construct(TRIM) SeqShortSeqUnboundBound sssub_t;
    @try_construct(TRIM) SeqShortSeqBoundUnbound sssbu_t;
    @try_construct(TRIM) SeqShortSeqBoundBound sssbb_t;
    @try_construct(TRIM) UnionSeqUnbound usu_t;
    @try_construct(TRIM) UnionSeqBound usb_t;
  };
  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct DiscardStructString1 {
    str64 str64_d;
  };
  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct DiscardStructString2 {
    @try_construct(DISCARD) str20 str20_d;
  };
  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct DiscardStructWString1 {
    wstr64 wstr64_d;
  };
  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct DiscardStructWString2 {
    @try_construct(DISCARD) wstr20 wstr20_d;
  };
  //TODO: SEUQENCES
  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct DiscardStructStruct1 {
    NestedStruct ns;
  };
  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct DiscardStructStruct2 {
    @try_construct(DISCARD) NestedStructTrim ns;
  };
  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct DiscardStructArray1 {
    str64Array sa;
  };
  @mutable
  @OpenDDS::data_representation(XCDR1)
  struct DiscardStructArray2 {
    @try_construct(DISCARD) str20Array sa;
  };
};
