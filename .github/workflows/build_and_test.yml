name: "Build & Test"

on:
  push:
    branches:
      - master
      - branch-DDS-3.*
      - gh_wf_*
    paths:
      - '**'
      # Don't run this workflow if the only files that changed are the
      # following. Make sure this is the same as the "pull_request.paths" list.
      - '!AUTHORS'
      - '!PROBLEM-REPORT-FORM'
      - '!LICENSE'
      - '!azure-pipelines.yml'
      - '!.travis.yml'
      - '!Dockerfile**'
      - '!.dockerignore'
      - '!.mailmap'
      - '!.github/workflows/lint.yml'
      - '!etc/**'
      - '!docs/**'
      - '!hooks/**'
      - '!tools/scripts/**'
      - '!**.md'
      - '!**.rst'
      - '!**.txt'
      - '!**/.gitignore'
      - '!**/.lint_config'
      - '!**/README*'
  pull_request:
    branches:
      - master
      - branch-DDS-3.*
    paths:
      - '**'
      # Don't run this workflow if the only files that changed are the
      # following. Make sure this is the same as the "push.paths" list.
      - '!AUTHORS'
      - '!PROBLEM-REPORT-FORM'
      - '!LICENSE'
      - '!azure-pipelines.yml'
      - '!.travis.yml'
      - '!Dockerfile**'
      - '!.dockerignore'
      - '!.mailmap'
      - '!.github/workflows/lint.yml'
      - '!etc/**'
      - '!docs/**'
      - '!hooks/**'
      - '!tools/scripts/**'
      - '!**.md'
      - '!**.rst'
      - '!**.txt'
      - '!**/.gitignore'
      - '!**/.lint_config'
      - '!**/README*'

env:
  TRIGGERING_COMMIT: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:

  wait_cancel_previous:

    runs-on: ubuntu-20.04

    steps:
    - uses: convictional/trigger-workflow-and-wait@v1.3.0
      with:
        owner: ${{ github.repository_owner }}
        repo: OpenDDS
        github_token: ${{ secrets.GITHUB_TOKEN }}
        workflow_file_name: cancel_previous_runs.yml
        ref: ${{ env.TRIGGERING_COMMIT }}
        trigger_workflow: false

  ACE_TAO_u18_gcc6_d0w1_cpp03_2:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install gcc-6 g++-6
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 100 --slave /usr/bin/g++ g++ /usr/bin/g++-6
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.4
      with:
        path: ${{ github.job }}.tar.xz
        key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --compiler=g++ --no-debug --features=uses_wchar=1 --std=c++03 --tests --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_gcc6_d0w1_cpp03_2:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_gcc6_d0w1_cpp03_2

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install gcc-6 g++-6
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-6 100 --slave /usr/bin/g++ g++ /usr/bin/g++-6
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_gcc6_d0w1_cpp03_2_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_gcc6_d0w1_cpp03_2.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --compiler=g++ --no-debug --features=uses_wchar=1 --std=c++03 --tests --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: build and run CMake tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/cmake_integration
        perl run_ci_tests.pl --skip-cxx11
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  # test_u18_gcc6_d0w1_cpp03_2:

  #   runs-on: ubuntu-18.04

  #   needs: build_u18_gcc6_d0w1_cpp03_2

  #   steps:
  #   - name: install gcc
  #     run: |
  #       sudo apt-get install -y gcc-6
  #       sudo update-alternatives \
  #         --install /usr/bin/gcc gcc /usr/bin/gcc-6 100 \
  #         --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-6 \
  #         --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-6 \
  #         --slave /usr/bin/gcov gcov /usr/bin/gcov-6
  #   - name: install xerces
  #     run: sudo apt-get -y install libxerces-c-dev
  #   - name: checkout MPC
  #     uses: actions/checkout@v2.3.4
  #     with:
  #       repository: DOCGroup/MPC
  #       path: MPC
  #   - name: checkout autobuild
  #     uses: actions/checkout@v2.3.4
  #     with:
  #       repository: DOCGroup/autobuild
  #       path: autobuild
  #   - name: checkout ACE_TAO
  #     uses: actions/checkout@v2.3.4
  #     with:
  #       repository: DOCGroup/ACE_TAO
  #       ref: ace6tao2
  #       path: ACE_TAO
  #   - name: download ACE_TAO artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: ACE_TAO_u18_gcc6_d0w1_cpp03_2_artifact
  #       path: ACE_TAO
  #   - name: extract ACE_TAO artifact
  #     shell: bash
  #     run: |
  #       cd ACE_TAO
  #       tar xvfJ ACE_TAO_u18_gcc6_d0w1_cpp03_2.tar.xz
  #   - name: checkout OpenDDS
  #     uses: actions/checkout@v2.3.4
  #     with:
  #       path: OpenDDS
  #       submodules: true
  #   - name: download OpenDDS artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: build_u18_gcc6_d0w1_cpp03_2_artifact
  #       path: OpenDDS
  #   - name: extract OpenDDS artifact
  #     shell: bash
  #     run: |
  #       cd OpenDDS
  #       tar xvfJ build_u18_gcc6_d0w1_cpp03_2.tar.xz
  #   - name: check build configuration
  #     shell: bash
  #     run: |
  #       cd OpenDDS
  #       . setenv.sh
  #       tools/scripts/show_build_config.pl
  #   - name: run OpenDDS tests
  #     shell: bash
  #     run: |
  #       cd OpenDDS
  #       . setenv.sh
  #       mkdir ${{ github.job }}_autobuild_workspace
  #       cd ${{ github.job }}_autobuild_workspace
  #       echo using commit $TRIGGERING_COMMIT for SHA
  #       echo $TRIGGERING_COMMIT >> ./SHA
  #       cat > config.xml <<EOF
  #       <autobuild>
  #       <configuration>
  #       <variable name="log_file" value="output.log"/>
  #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
  #       <variable name="project_root" value="$DDS_ROOT"/>
  #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
  #       <variable name="junit_xml_output" value="Tests"/>
  #       </configuration>
  #       <command name="log" options="on"/>
  #       <command name="print_os_version"/>
  #       <command name="print_env_vars"/>
  #       <command name="print_ace_config"/>
  #       <command name="print_make_version"/>
  #       <command name="check_compiler" options="gcc"/>
  #       <command name="print_perl_version"/>
  #       <command name="print_autobuild_config"/>
  #       <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config WCHAR -Config RAPIDJSON -Config GH_ACTIONS"/>
  #       <command name="log" options="off"/>
  #       <command name="process_logs" options="prettify"/>
  #       </autobuild>
  #       EOF
  #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
  #   - name: upload autobuild output
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ${{ github.job }}_autobuild_output
  #       path: OpenDDS/${{ github.job }}_autobuild_workspace
  #   - name: check results
  #     shell: bash
  #     run: |
  #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
  #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_u18_gcc8_i0_js0_j_2:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install gcc-8 g++-8
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 --slave /usr/bin/g++ g++ /usr/bin/g++-8
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.4
      with:
        path: ${{ github.job }}.tar.xz
        key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --compiler=g++ --no-inline --no-rapidjson --tests --java --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_gcc8_i0_js0_j_2:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_gcc8_i0_js0_j_2

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install gcc-8 g++-8
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 --slave /usr/bin/g++ g++ /usr/bin/g++-8
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_gcc8_i0_js0_j_2_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_gcc8_i0_js0_j_2.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --compiler=g++ --no-inline --no-rapidjson --tests --java --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: build and run CMake tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/cmake_integration
        perl run_ci_tests.pl
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  # test_u18_gcc8_i0_js0_j_2:

  #   runs-on: ubuntu-18.04

  #   needs: build_u18_gcc8_i0_js0_j_2

  #   steps:
  #   - name: install gcc
  #     run: |
  #       sudo apt-get install -y gcc-8
  #       sudo update-alternatives \
  #         --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 \
  #         --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-8 \
  #         --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-8 \
  #         --slave /usr/bin/gcov gcov /usr/bin/gcov-8
  #   - name: install xerces
  #     run: sudo apt-get -y install libxerces-c-dev
  #   - name: checkout MPC
  #     uses: actions/checkout@v2.3.4
  #     with:
  #       repository: DOCGroup/MPC
  #       path: MPC
  #   - name: checkout autobuild
  #     uses: actions/checkout@v2.3.4
  #     with:
  #       repository: DOCGroup/autobuild
  #       path: autobuild
  #   - name: checkout ACE_TAO
  #     uses: actions/checkout@v2.3.4
  #     with:
  #       repository: DOCGroup/ACE_TAO
  #       ref: ace6tao2
  #       path: ACE_TAO
  #   - name: download ACE_TAO artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: ACE_TAO_u18_gcc8_i0_js0_j_2_artifact
  #       path: ACE_TAO
  #   - name: extract ACE_TAO artifact
  #     shell: bash
  #     run: |
  #       cd ACE_TAO
  #       tar xvfJ ACE_TAO_u18_gcc8_i0_js0_j_2.tar.xz
  #   - name: checkout OpenDDS
  #     uses: actions/checkout@v2.3.4
  #     with:
  #       path: OpenDDS
  #       submodules: true
  #   - name: download OpenDDS artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: build_u18_gcc8_i0_js0_j_2_artifact
  #       path: OpenDDS
  #   - name: extract OpenDDS artifact
  #     shell: bash
  #     run: |
  #       cd OpenDDS
  #       tar xvfJ build_u18_gcc8_i0_js0_j_2.tar.xz
  #   - name: check build configuration
  #     shell: bash
  #     run: |
  #       cd OpenDDS
  #       . setenv.sh
  #       tools/scripts/show_build_config.pl
  #   - name: run OpenDDS tests
  #     shell: bash
  #     run: |
  #       cd OpenDDS
  #       . setenv.sh
  #       mkdir ${{ github.job }}_autobuild_workspace
  #       cd ${{ github.job }}_autobuild_workspace
  #       echo using commit $TRIGGERING_COMMIT for SHA
  #       echo $TRIGGERING_COMMIT >> ./SHA
  #       cat > config.xml <<EOF
  #       <autobuild>
  #       <configuration>
  #       <variable name="log_file" value="output.log"/>
  #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
  #       <variable name="project_root" value="$DDS_ROOT"/>
  #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
  #       <variable name="junit_xml_output" value="Tests"/>
  #       </configuration>
  #       <command name="log" options="on"/>
  #       <command name="print_os_version"/>
  #       <command name="print_env_vars"/>
  #       <command name="print_ace_config"/>
  #       <command name="print_make_version"/>
  #       <command name="check_compiler" options="gcc"/>
  #       <command name="print_perl_version"/>
  #       <command name="print_autobuild_config"/>
  #       <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config CXX11 -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst"/>
  #       <command name="log" options="off"/>
  #       <command name="process_logs" options="prettify"/>
  #       </autobuild>
  #       EOF
  #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
  #   - name: upload autobuild output
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ${{ github.job }}_autobuild_output
  #       path: OpenDDS/${{ github.job }}_autobuild_workspace
  #   - name: check results
  #     shell: bash
  #     run: |
  #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
  #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_u18_gcc10_i0w1_xer0_2:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install gcc-10 g++-10
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.4
      with:
        path: ${{ github.job }}.tar.xz
        key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --compiler=g++ --no-inline --features=uses_wchar=1 --tests --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_gcc10_i0w1_xer0_2:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_gcc10_i0w1_xer0_2

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install gcc-10 g++-10
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_gcc10_i0w1_xer0_2_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_gcc10_i0w1_xer0_2.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --compiler=g++ --no-inline --features=uses_wchar=1 --tests --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: build and run CMake tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/cmake_integration
        perl run_ci_tests.pl
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz
