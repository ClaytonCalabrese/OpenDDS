name: "Build & Test"

on:
  push:
    branches:
      - master
      - branch-DDS-3.*
      - gh_wf_*
    paths:
      - '**'
      - '!docs/**'
      - '!README.md'
      - '!INSTALL.md'
      - '!NEWS.md'
      - '!tools/scripts/**'
  pull_request:
    branches:
      - master
      - branch-DDS-3.*
    paths:
      - '**'
      - '!docs/**'
      - '!README.md'
      - '!INSTALL.md'
      - '!NEWS.md'
      - '!tools/scripts/**'

env:
  TRIGGERING_COMMIT: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:
#   ubuntu-18_04_debug_java_ACE_TAO:

#     runs-on: ubuntu-18.04

#     steps:
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --no-inline --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   ubuntu-18_04_debug_java_build:

#     runs-on: ubuntu-18.04

#     needs: ubuntu-18_04_debug_java_ACE_TAO

#     steps:
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ubuntu-18_04_debug_java_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ ubuntu-18_04_debug_java_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --no-inline --tests --java --no-rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4
#     - name: set up DevGuide test
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         mwc.pl -type gnuace -workers 4 $DDS_ROOT/DevGuideExamples/DCPS/Messenger
#     - name: build DevGuide test
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4 dir=$DDS_ROOT/DevGuideExamples/DCPS/Messenger
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   # ubuntu-18_04_debug_java_test:

#   #   runs-on: ubuntu-18.04

#   #   needs: ubuntu-18_04_debug_java_build

#   #   steps:
#   #   - name: install xerces
#   #     run: sudo apt-get -y install libxerces-c-dev
#   #   - name: checkout MPC
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/MPC
#   #       path: MPC
#   #   - name: checkout autobuild
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/autobuild
#   #       path: autobuild
#   #   - name: checkout ACE_TAO
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/ACE_TAO
#   #       ref: ace6tao2
#   #       path: ACE_TAO
#   #   - name: download ACE_TAO artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_wchar_ACE_TAO_artifact
#   #       path: ACE_TAO
#   #   - name: extract ACE_TAO artifact
#   #     shell: bash
#   #     run: |
#   #       cd ACE_TAO
#   #       tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
#   #   - name: checkout OpenDDS
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       path: OpenDDS
#   #       submodules: true
#   #   - name: download OpenDDS artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_debug_java_build_artifact
#   #       path: OpenDDS
#   #   - name: extract OpenDDS artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       tar xvfJ ubuntu-18_04_debug_java_build.tar.xz
#   #   - name: check build configuration
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       tools/scripts/show_build_config.pl
#   #   - name: run OpenDDS tests
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       mkdir ${{ github.job }}_autobuild_workspace
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       echo using commit $TRIGGERING_COMMIT for SHA
#   #       echo $TRIGGERING_COMMIT >> ./SHA
#   #       cat > config.xml <<EOF
#   #       <autobuild>
#   #       <configuration>
#   #       <variable name="log_file" value="output.log"/>
#   #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="project_root" value="$DDS_ROOT"/>
#   #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="junit_xml_output" value="Tests"/>
#   #       </configuration>
#   #       <command name="log" options="on"/>
#   #       <command name="print_os_version"/>
#   #       <command name="print_env_vars"/>
#   #       <command name="print_ace_config"/>
#   #       <command name="print_make_version"/>
#   #       <command name="check_compiler" options="gcc"/>
#   #       <command name="print_perl_version"/>
#   #       <command name="print_autobuild_config"/>
#   #       <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config CXX11 -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst"/>
#   #       <command name="log" options="off"/>
#   #       <command name="process_logs" options="prettify"/>
#   #       </autobuild>
#   #       EOF
#   #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#   #   - name: upload autobuild output
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: ${{ github.job }}_autobuild_output
#   #       path: OpenDDS/${{ github.job }}_autobuild_workspace
#   #   - name: check results
#   #     shell: bash
#   #     run: |
#   #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#   #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   ubuntu-18_04_release_java_ACE_TAO:

#     runs-on: ubuntu-18.04

#     steps:
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --tests --optimize --no-debug --features=versioned_namspace=1 --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   ubuntu-18_04_release_java_build:

#     runs-on: ubuntu-18.04

#     needs: ubuntu-18_04_release_java_ACE_TAO

#     steps:
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ubuntu-18_04_release_java_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ ubuntu-18_04_release_java_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --optimize --no-debug --features=versioned_namespace=1 --tests --java --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   # ubuntu-18_04_release_java_test:

#   #   runs-on: ubuntu-18.04

#   #   needs: ubuntu-18_04_release_java_build

#   #   steps:
#   #   - name: install xerces
#   #     run: sudo apt-get -y install libxerces-c-dev
#   #   - name: checkout MPC
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/MPC
#   #       path: MPC
#   #   - name: checkout autobuild
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/autobuild
#   #       path: autobuild
#   #   - name: checkout ACE_TAO
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/ACE_TAO
#   #       ref: ace6tao2
#   #       path: ACE_TAO
#   #   - name: download ACE_TAO artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_wchar_ACE_TAO_artifact
#   #       path: ACE_TAO
#   #   - name: extract ACE_TAO artifact
#   #     shell: bash
#   #     run: |
#   #       cd ACE_TAO
#   #       tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
#   #   - name: checkout OpenDDS
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       path: OpenDDS
#   #       submodules: true
#   #   - name: download OpenDDS artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_release_java_build_artifact
#   #       path: OpenDDS
#   #   - name: extract OpenDDS artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       tar xvfJ ubuntu-18_04_release_java_build.tar.xz
#   #   - name: check build configuration
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       tools/scripts/show_build_config.pl
#   #   - name: run OpenDDS tests
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       mkdir ${{ github.job }}_autobuild_workspace
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       echo using commit $TRIGGERING_COMMIT for SHA
#   #       echo $TRIGGERING_COMMIT >> ./SHA
#   #       cat > config.xml <<EOF
#   #       <autobuild>
#   #       <configuration>
#   #       <variable name="log_file" value="output.log"/>
#   #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="project_root" value="$DDS_ROOT"/>
#   #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="junit_xml_output" value="Tests"/>
#   #       </configuration>
#   #       <command name="log" options="on"/>
#   #       <command name="print_os_version"/>
#   #       <command name="print_env_vars"/>
#   #       <command name="print_ace_config"/>
#   #       <command name="print_make_version"/>
#   #       <command name="check_compiler" options="gcc"/>
#   #       <command name="print_perl_version"/>
#   #       <command name="print_autobuild_config"/>
#   #       <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst"/>
#   #       <command name="log" options="off"/>
#   #       <command name="process_logs" options="prettify"/>
#   #       </autobuild>
#   #       EOF
#   #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#   #   - name: upload autobuild output
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: ${{ github.job }}_autobuild_output
#   #       path: OpenDDS/${{ github.job }}_autobuild_workspace
#   #   - name: check results
#   #     shell: bash
#   #     run: |
#   #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#   #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   ubuntu-18_04_extendedsafety_ACE_TAO:

#     runs-on: ubuntu-18.04

#     steps:
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   ubuntu-18_04_extendedsafety_build:

#     runs-on: ubuntu-18.04

#     needs: ubuntu-18_04_extendedsafety_ACE_TAO

#     steps:
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ubuntu-18_04_extendedsafety_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ ubuntu-18_04_extendedsafety_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --tests --safety-profile --no-rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS/build/target
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS/build/target
#         . setenv.sh
#         make -j4
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS/build/target
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   # ubuntu-18_04_extendedsafety_test:

#   #   runs-on: ubuntu-18.04

#   #   needs: ubuntu-18_04_extendedsafety_build

#   #   steps:
#   #   - name: install xerces
#   #     run: sudo apt-get -y install libxerces-c-dev
#   #   - name: checkout MPC
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/MPC
#   #       path: MPC
#   #   - name: checkout autobuild
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/autobuild
#   #       path: autobuild
#   #   - name: checkout ACE_TAO
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/ACE_TAO
#   #       ref: ace6tao2
#   #       path: ACE_TAO
#   #   - name: download ACE_TAO artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_wchar_ACE_TAO_artifact
#   #       path: ACE_TAO
#   #   - name: extract ACE_TAO artifact
#   #     shell: bash
#   #     run: |
#   #       cd ACE_TAO
#   #       tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
#   #   - name: checkout OpenDDS
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       path: OpenDDS
#   #       submodules: true
#   #   - name: download OpenDDS artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_extendedsafety_build_artifact
#   #       path: OpenDDS
#   #   - name: extract OpenDDS artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       tar xvfJ ubuntu-18_04_extendedsafety_build.tar.xz
#   #   - name: check build configuration
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       tools/scripts/show_build_config.pl
#   #   - name: run OpenDDS tests
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       mkdir ${{ github.job }}_autobuild_workspace
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       echo using commit $TRIGGERING_COMMIT for SHA
#   #       echo $TRIGGERING_COMMIT >> ./SHA
#   #       cat > config.xml <<EOF
#   #       <autobuild>
#   #       <configuration>
#   #       <variable name="log_file" value="output.log"/>
#   #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="project_root" value="$DDS_ROOT"/>
#   #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="junit_xml_output" value="Tests"/>
#   #       </configuration>
#   #       <command name="log" options="on"/>
#   #       <command name="print_os_version"/>
#   #       <command name="print_env_vars"/>
#   #       <command name="print_ace_config"/>
#   #       <command name="print_make_version"/>
#   #       <command name="check_compiler" options="gcc"/>
#   #       <command name="print_perl_version"/>
#   #       <command name="print_autobuild_config"/>
#   #       <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config CXX11 -Config OPENDDS_SAFETY_PROFILE -Config GH_ACTIONS"/>
#   #       <command name="log" options="off"/>
#   #       <command name="process_logs" options="prettify"/>
#   #       </autobuild>
#   #       EOF
#   #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#   #   - name: upload autobuild output
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: ${{ github.job }}_autobuild_output
#   #       path: OpenDDS/${{ github.job }}_autobuild_workspace
#   #   - name: check results
#   #     shell: bash
#   #     run: |
#   #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#   #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   ubuntu-18_04_basesafety_ACE_TAO:

#     runs-on: ubuntu-18.04

#     steps:
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   ubuntu-18_04_basesafety_build:

#     runs-on: ubuntu-18.04

#     needs: ubuntu-18_04_basesafety_ACE_TAO

#     steps:
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ubuntu-18_04_basesafety_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ ubuntu-18_04_basesafety_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --tests --safety-profile=base --no-rapidjson --no-built-in-topics --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS/build/target
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS/build/target
#         . setenv.sh
#         make -j4
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS/build/target
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   # ubuntu-18_04_basesafety_test:

#   #   runs-on: ubuntu-18.04

#   #   needs: ubuntu-18_04_basesafety_build

#   #   steps:
#   #   - name: install xerces
#   #     run: sudo apt-get -y install libxerces-c-dev
#   #   - name: checkout MPC
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/MPC
#   #       path: MPC
#   #   - name: checkout autobuild
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/autobuild
#   #       path: autobuild
#   #   - name: checkout ACE_TAO
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/ACE_TAO
#   #       ref: ace6tao2
#   #       path: ACE_TAO
#   #   - name: download ACE_TAO artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_wchar_ACE_TAO_artifact
#   #       path: ACE_TAO
#   #   - name: extract ACE_TAO artifact
#   #     shell: bash
#   #     run: |
#   #       cd ACE_TAO
#   #       tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
#   #   - name: checkout OpenDDS
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       path: OpenDDS
#   #       submodules: true
#   #   - name: download OpenDDS artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_basesafety_build_artifact
#   #       path: OpenDDS
#   #   - name: extract OpenDDS artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       tar xvfJ ubuntu-18_04_basesafety_build.tar.xz
#   #   - name: check build configuration
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       tools/scripts/show_build_config.pl
#   #   - name: run OpenDDS tests
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       mkdir ${{ github.job }}_autobuild_workspace
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       echo using commit $TRIGGERING_COMMIT for SHA
#   #       echo $TRIGGERING_COMMIT >> ./SHA
#   #       cat > config.xml <<EOF
#   #       <autobuild>
#   #       <configuration>
#   #       <variable name="log_file" value="output.log"/>
#   #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="project_root" value="$DDS_ROOT"/>
#   #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="junit_xml_output" value="Tests"/>
#   #       </configuration>
#   #       <command name="log" options="on"/>
#   #       <command name="print_os_version"/>
#   #       <command name="print_env_vars"/>
#   #       <command name="print_ace_config"/>
#   #       <command name="print_make_version"/>
#   #       <command name="check_compiler" options="gcc"/>
#   #       <command name="print_perl_version"/>
#   #       <command name="print_autobuild_config"/>
#   #       <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config CXX11 -Config OPENDDS_SAFETY_PROFILE -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS"/>
#   #       <command name="log" options="off"/>
#   #       <command name="process_logs" options="prettify"/>
#   #       </autobuild>
#   #       EOF
#   #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#   #   - name: upload autobuild output
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: ${{ github.job }}_autobuild_output
#   #       path: OpenDDS/${{ github.job }}_autobuild_workspace
#   #   - name: check results
#   #     shell: bash
#   #     run: |
#   #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#   #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   ubuntu-18_04_sec_wofeatures_ACE_TAO:

#     runs-on: ubuntu-18.04

#     steps:
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --no-debug --no-inline --features=versioned_namespace=1 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   ubuntu-18_04_sec_wofeatures_build:

#     runs-on: ubuntu-18.04

#     needs: ubuntu-18_04_sec_wofeatures_ACE_TAO

#     steps:
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ubuntu-18_04_sec_wofeatures_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ ubuntu-18_04_sec_wofeatures_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --no-debug --no-inline --features=versioned_namespace=1 --tests --security --no-rapidjson --no-built-in-topics --no-content-subscription --no-ownership-profile --no-object-model-profile --no-persitence-profile --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   # ubuntu-18_04_sec_wofeatures_test:

#   #   runs-on: ubuntu-18.04

#   #   needs: ubuntu-18_04_sec_wofeatures_build

#   #   steps:
#   #   - name: install xerces
#   #     run: sudo apt-get -y install libxerces-c-dev
#   #   - name: checkout MPC
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/MPC
#   #       path: MPC
#   #   - name: checkout autobuild
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/autobuild
#   #       path: autobuild
#   #   - name: checkout ACE_TAO
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/ACE_TAO
#   #       ref: ace6tao2
#   #       path: ACE_TAO
#   #   - name: download ACE_TAO artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_wchar_ACE_TAO_artifact
#   #       path: ACE_TAO
#   #   - name: extract ACE_TAO artifact
#   #     shell: bash
#   #     run: |
#   #       cd ACE_TAO
#   #       tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
#   #   - name: checkout OpenDDS
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       path: OpenDDS
#   #       submodules: true
#   #   - name: download OpenDDS artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_sec_wofeatures_build_artifact
#   #       path: OpenDDS
#   #   - name: extract OpenDDS artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       tar xvfJ ubuntu-18_04_sec_wofeatures_build.tar.xz
#   #   - name: check build configuration
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       tools/scripts/show_build_config.pl
#   #   - name: run OpenDDS tests
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       mkdir ${{ github.job }}_autobuild_workspace
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       echo using commit $TRIGGERING_COMMIT for SHA
#   #       echo $TRIGGERING_COMMIT >> ./SHA
#   #       cat > config.xml <<EOF
#   #       <autobuild>
#   #       <configuration>
#   #       <variable name="log_file" value="output.log"/>
#   #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="project_root" value="$DDS_ROOT"/>
#   #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="junit_xml_output" value="Tests"/>
#   #       </configuration>
#   #       <command name="log" options="on"/>
#   #       <command name="print_os_version"/>
#   #       <command name="print_env_vars"/>
#   #       <command name="print_ace_config"/>
#   #       <command name="print_make_version"/>
#   #       <command name="check_compiler" options="gcc"/>
#   #       <command name="print_perl_version"/>
#   #       <command name="print_autobuild_config"/>
#   #       <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config WCHAR -Config CXX11 -Config OPENDDS_SECURITY -Config NO_BUILT_IN_TOPICS -Config DDS_NO_CONTENT_SUBSCRIPTION -Config DDS_NO_OWNERSHIP_PROFILE -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE -Config GH_ACTIONS  -a -l tests/security/security_tests.lst"/>
#   #       <command name="log" options="off"/>
#   #       <command name="process_logs" options="prettify"/>
#   #       </autobuild>
#   #       EOF
#   #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#   #   - name: upload autobuild output
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: ${{ github.job }}_autobuild_output
#   #       path: OpenDDS/${{ github.job }}_autobuild_workspace
#   #   - name: check results
#   #     shell: bash
#   #     run: |
#   #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#   #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   ubuntu-18_04_clang5_ACE_TAO:

#     runs-on: ubuntu-18.04

#     steps:
#     - name: install clang++
#       run: |
#         sudo apt-get install -y clang-5.0
#         sudo update-alternatives \
#           --install /usr/bin/clang++ clang++ /usr/bin/clang++-5.0 100
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --compiler=clang++ --no-inline --features=uses_wchar=1 --std=c++11 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   ubuntu-18_04_clang5_build:

#     runs-on: ubuntu-18.04

#     needs: ubuntu-18_04_clang5_ACE_TAO

#     steps:
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: install clang++
#       run: | 
#         sudo apt-get install -y clang-5.0
#         sudo update-alternatives \
#           --install /usr/bin/clang++ clang++ /usr/bin/clang++-5.0 100
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ubuntu-18_04_clang5_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ ubuntu-18_04_clang5_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --compiler=clang++ --no-inline --features=uses_wchar=1 --std=c++11 --tests --security --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --rapidjson --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   # ubuntu-18_04_clang5_test:

#   #   runs-on: ubuntu-18.04

#   #   needs: ubuntu-18_04_clang5_build

#   #   steps:
#   #   - name: install xerces
#   #     run: sudo apt-get -y install libxerces-c-dev
#   #   - name: install clang++
#   #     run: | 
#   #       sudo apt-get install -y clang-5.0
#   #       sudo update-alternatives \
#   #         --install /usr/bin/clang++ clang++ /usr/bin/clang++-5.0 100
#   #   - name: checkout MPC
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/MPC
#   #       path: MPC
#   #   - name: checkout autobuild
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/autobuild
#   #       path: autobuild
#   #   - name: checkout ACE_TAO
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/ACE_TAO
#   #       ref: ace6tao2
#   #       path: ACE_TAO
#   #   - name: download ACE_TAO artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_wchar_ACE_TAO_artifact
#   #       path: ACE_TAO
#   #   - name: extract ACE_TAO artifact
#   #     shell: bash
#   #     run: |
#   #       cd ACE_TAO
#   #       tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
#   #   - name: checkout OpenDDS
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       path: OpenDDS
#   #       submodules: true
#   #   - name: download OpenDDS artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_clang5_build_artifact
#   #       path: OpenDDS
#   #   - name: extract OpenDDS artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       tar xvfJ ubuntu-18_04_clang5_build.tar.xz
#   #   - name: check build configuration
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       tools/scripts/show_build_config.pl
#   #   - name: run OpenDDS tests
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       mkdir ${{ github.job }}_autobuild_workspace
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       echo using commit $TRIGGERING_COMMIT for SHA
#   #       echo $TRIGGERING_COMMIT >> ./SHA
#   #       cat > config.xml <<EOF
#   #       <autobuild>
#   #       <configuration>
#   #       <variable name="log_file" value="output.log"/>
#   #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="project_root" value="$DDS_ROOT"/>
#   #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="junit_xml_output" value="Tests"/>
#   #       </configuration>
#   #       <command name="log" options="on"/>
#   #       <command name="print_os_version"/>
#   #       <command name="print_env_vars"/>
#   #       <command name="print_ace_config"/>
#   #       <command name="print_make_version"/>
#   #       <command name="check_compiler" options="clang++"/>
#   #       <command name="print_perl_version"/>
#   #       <command name="print_autobuild_config"/>
#   #       <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config WCHAR -Config CXX11 -Config OPENDDS_SECURITY -Config RAPIDJSON -Config GH_ACTIONS  -a -l tests/security/security_tests.lst"/>
#   #       <command name="log" options="off"/>
#   #       <command name="process_logs" options="prettify"/>
#   #       </autobuild>
#   #       EOF
#   #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#   #   - name: upload autobuild output
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: ${{ github.job }}_autobuild_output
#   #       path: OpenDDS/${{ github.job }}_autobuild_workspace
#   #   - name: check results
#   #     shell: bash
#   #     run: |
#   #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#   #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   ubuntu-18_04_clang10_ACE_TAO:

#     runs-on: ubuntu-18.04

#     steps:
#     - name: install clang++
#       run: |
#         sudo apt-get install -y clang-10
#         sudo update-alternatives \
#           --install /usr/bin/clang++ clang++ /usr/bin/clang++-10 100
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --compiler=clang++ --std=c++11 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   ubuntu-18_04_clang10_build:

#     runs-on: ubuntu-18.04

#     needs: ubuntu-18_04_clang10_ACE_TAO

#     steps:
#     - name: install clang++
#       run: |
#         sudo apt-get install -y clang-10
#         sudo update-alternatives \
#           --install /usr/bin/clang++ clang++ /usr/bin/clang++-10 100
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ubuntu-18_04_clang10_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ ubuntu-18_04_clang10_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --compiler=clang++ --std=c++11 --tests --security --no-rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   # ubuntu-18_04_clang10_test:

#   #   runs-on: ubuntu-18.04

#   #   needs: ubuntu-18_04_clang10_build

#   #   steps:
#   #   - name: install xerces
#   #     run: sudo apt-get -y install libxerces-c-dev
#   #   - name: install clang++
#   #     run: |
#   #       sudo apt-get install -y clang-10.0
#   #       sudo update-alternatives \
#   #         --install /usr/bin/clang++ clang++ /usr/bin/clang++-10.0 100
#   #   - name: checkout MPC
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/MPC
#   #       path: MPC
#   #   - name: checkout autobuild
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/autobuild
#   #       path: autobuild
#   #   - name: checkout ACE_TAO
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/ACE_TAO
#   #       ref: ace6tao2
#   #       path: ACE_TAO
#   #   - name: download ACE_TAO artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_wchar_ACE_TAO_artifact
#   #       path: ACE_TAO
#   #   - name: extract ACE_TAO artifact
#   #     shell: bash
#   #     run: |
#   #       cd ACE_TAO
#   #       tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
#   #   - name: checkout OpenDDS
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       path: OpenDDS
#   #       submodules: true
#   #   - name: download OpenDDS artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_clang10_build_artifact
#   #       path: OpenDDS
#   #   - name: extract OpenDDS artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       tar xvfJ ubuntu-18_04_clang10_build.tar.xz
#   #   - name: check build configuration
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       tools/scripts/show_build_config.pl
#   #   - name: run OpenDDS tests
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       mkdir ${{ github.job }}_autobuild_workspace
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       echo using commit $TRIGGERING_COMMIT for SHA
#   #       echo $TRIGGERING_COMMIT >> ./SHA
#   #       cat > config.xml <<EOF
#   #       <autobuild>
#   #       <configuration>
#   #       <variable name="log_file" value="output.log"/>
#   #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="project_root" value="$DDS_ROOT"/>
#   #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="junit_xml_output" value="Tests"/>
#   #       </configuration>
#   #       <command name="log" options="on"/>
#   #       <command name="print_os_version"/>
#   #       <command name="print_env_vars"/>
#   #       <command name="print_ace_config"/>
#   #       <command name="print_make_version"/>
#   #       <command name="check_compiler" options="clang++"/>
#   #       <command name="print_perl_version"/>
#   #       <command name="print_autobuild_config"/>
#   #       <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config CXX11 -Config OPENDDS_SECURITY -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
#   #       <command name="log" options="off"/>
#   #       <command name="process_logs" options="prettify"/>
#   #       </autobuild>
#   #       EOF
#   #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#   #   - name: upload autobuild output
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: ${{ github.job }}_autobuild_output
#   #       path: OpenDDS/${{ github.job }}_autobuild_workspace
#   #   - name: check results
#   #     shell: bash
#   #     run: |
#   #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#   #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   ubuntu-18_04_gcc6_cpp03_ACE_TAO:

#     runs-on: ubuntu-18.04

#     steps:
#     - name: install gcc
#       run: | 
#         sudo apt-get install -y gcc-6
#         sudo update-alternatives \
#           --install /usr/bin/gcc gcc /usr/bin/gcc-6 100 \
#           --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-6 \
#           --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-6 \
#           --slave /usr/bin/gcov gcov /usr/bin/gcov-6
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --compiler=g++ --no-debug --features=uses_wchar=1 --std=c++03 --tests --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   ubuntu-18_04_gcc6_cpp03_build:

#     runs-on: ubuntu-18.04

#     needs: ubuntu-18_04_gcc6_cpp03_ACE_TAO

#     steps:
#     - name: install gcc
#       run: | 
#         sudo apt-get install -y gcc-6
#         sudo update-alternatives \
#           --install /usr/bin/gcc gcc /usr/bin/gcc-6 100 \
#           --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-6 \
#           --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-6 \
#           --slave /usr/bin/gcov gcov /usr/bin/gcov-6
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ubuntu-18_04_gcc6_cpp03_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ ubuntu-18_04_gcc6_cpp03_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --compiler=g++ --no-debug --features=uses_wchar=1 --std=c++03 --tests --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   # ubuntu-18_04_gcc6_cpp03_test:

#   #   runs-on: ubuntu-18.04

#   #   needs: ubuntu-18_04_gcc6_cpp03_build

#   #   steps:
#   #   - name: install gcc
#   #     run: | 
#   #       sudo apt-get install -y gcc-6
#   #       sudo update-alternatives \
#   #         --install /usr/bin/gcc gcc /usr/bin/gcc-6 100 \
#   #         --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-6 \
#   #         --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-6 \
#   #         --slave /usr/bin/gcov gcov /usr/bin/gcov-6
#   #   - name: install xerces
#   #     run: sudo apt-get -y install libxerces-c-dev
#   #   - name: checkout MPC
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/MPC
#   #       path: MPC
#   #   - name: checkout autobuild
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/autobuild
#   #       path: autobuild
#   #   - name: checkout ACE_TAO
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/ACE_TAO
#   #       ref: ace6tao2
#   #       path: ACE_TAO
#   #   - name: download ACE_TAO artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_wchar_ACE_TAO_artifact
#   #       path: ACE_TAO
#   #   - name: extract ACE_TAO artifact
#   #     shell: bash
#   #     run: |
#   #       cd ACE_TAO
#   #       tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
#   #   - name: checkout OpenDDS
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       path: OpenDDS
#   #       submodules: true
#   #   - name: download OpenDDS artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_gcc6_cpp03_build_artifact
#   #       path: OpenDDS
#   #   - name: extract OpenDDS artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       tar xvfJ ubuntu-18_04_gcc6_cpp03_build.tar.xz
#   #   - name: check build configuration
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       tools/scripts/show_build_config.pl
#   #   - name: run OpenDDS tests
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       mkdir ${{ github.job }}_autobuild_workspace
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       echo using commit $TRIGGERING_COMMIT for SHA
#   #       echo $TRIGGERING_COMMIT >> ./SHA
#   #       cat > config.xml <<EOF
#   #       <autobuild>
#   #       <configuration>
#   #       <variable name="log_file" value="output.log"/>
#   #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="project_root" value="$DDS_ROOT"/>
#   #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="junit_xml_output" value="Tests"/>
#   #       </configuration>
#   #       <command name="log" options="on"/>
#   #       <command name="print_os_version"/>
#   #       <command name="print_env_vars"/>
#   #       <command name="print_ace_config"/>
#   #       <command name="print_make_version"/>
#   #       <command name="check_compiler" options="gcc"/>
#   #       <command name="print_perl_version"/>
#   #       <command name="print_autobuild_config"/>
#   #       <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config WCHAR -Config RAPIDJSON -Config GH_ACTIONS"/>
#   #       <command name="log" options="off"/>
#   #       <command name="process_logs" options="prettify"/>
#   #       </autobuild>
#   #       EOF
#   #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#   #   - name: upload autobuild output
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: ${{ github.job }}_autobuild_output
#   #       path: OpenDDS/${{ github.job }}_autobuild_workspace
#   #   - name: check results
#   #     shell: bash
#   #     run: |
#   #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#   #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   ubuntu-18_04_gcc8_ACE_TAO:

#     runs-on: ubuntu-18.04

#     steps:
#     - name: install gcc
#       run: | 
#         sudo apt-get install -y gcc-8
#         sudo update-alternatives \
#           --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 \
#           --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-8 \
#           --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-8 \
#           --slave /usr/bin/gcov gcov /usr/bin/gcov-8
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --compiler=g++ --no-inline --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   ubuntu-18_04_gcc8_build:

#     runs-on: ubuntu-18.04

#     needs: ubuntu-18_04_gcc8_ACE_TAO

#     steps:
#     - name: install gcc
#       run: | 
#         sudo apt-get install -y gcc-8
#         sudo update-alternatives \
#           --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 \
#           --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-8 \
#           --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-8 \
#           --slave /usr/bin/gcov gcov /usr/bin/gcov-8
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ubuntu-18_04_gcc8_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ ubuntu-18_04_gcc8_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --compiler=g++ --no-inline --no-rapidjson --tests --java --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   # ubuntu-18_04_gcc8_test:

#   #   runs-on: ubuntu-18.04

#   #   needs: ubuntu-18_04_gcc8_build

#   #   steps:
#   #   - name: install gcc
#   #     run: | 
#   #       sudo apt-get install -y gcc-8
#   #       sudo update-alternatives \
#   #         --install /usr/bin/gcc gcc /usr/bin/gcc-8 100 \
#   #         --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-8 \
#   #         --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-8 \
#   #         --slave /usr/bin/gcov gcov /usr/bin/gcov-8
#   #   - name: install xerces
#   #     run: sudo apt-get -y install libxerces-c-dev
#   #   - name: checkout MPC
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/MPC
#   #       path: MPC
#   #   - name: checkout autobuild
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/autobuild
#   #       path: autobuild
#   #   - name: checkout ACE_TAO
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/ACE_TAO
#   #       ref: ace6tao2
#   #       path: ACE_TAO
#   #   - name: download ACE_TAO artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_wchar_ACE_TAO_artifact
#   #       path: ACE_TAO
#   #   - name: extract ACE_TAO artifact
#   #     shell: bash
#   #     run: |
#   #       cd ACE_TAO
#   #       tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
#   #   - name: checkout OpenDDS
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       path: OpenDDS
#   #       submodules: true
#   #   - name: download OpenDDS artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_gcc8_build_artifact
#   #       path: OpenDDS
#   #   - name: extract OpenDDS artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       tar xvfJ ubuntu-18_04_gcc8_build.tar.xz
#   #   - name: check build configuration
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       tools/scripts/show_build_config.pl
#   #   - name: run OpenDDS tests
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       mkdir ${{ github.job }}_autobuild_workspace
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       echo using commit $TRIGGERING_COMMIT for SHA
#   #       echo $TRIGGERING_COMMIT >> ./SHA
#   #       cat > config.xml <<EOF
#   #       <autobuild>
#   #       <configuration>
#   #       <variable name="log_file" value="output.log"/>
#   #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="project_root" value="$DDS_ROOT"/>
#   #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="junit_xml_output" value="Tests"/>
#   #       </configuration>
#   #       <command name="log" options="on"/>
#   #       <command name="print_os_version"/>
#   #       <command name="print_env_vars"/>
#   #       <command name="print_ace_config"/>
#   #       <command name="print_make_version"/>
#   #       <command name="check_compiler" options="gcc"/>
#   #       <command name="print_perl_version"/>
#   #       <command name="print_autobuild_config"/>
#   #       <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config CXX11 -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst"/>
#   #       <command name="log" options="off"/>
#   #       <command name="process_logs" options="prettify"/>
#   #       </autobuild>
#   #       EOF
#   #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#   #   - name: upload autobuild output
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: ${{ github.job }}_autobuild_output
#   #       path: OpenDDS/${{ github.job }}_autobuild_workspace
#   #   - name: check results
#   #     shell: bash
#   #     run: |
#   #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#   #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   ubuntu-18_04_gcc10_ACE_TAO:

#     runs-on: ubuntu-18.04

#     steps:
#     - name: install gcc
#       run: | 
#         sudo apt-get install -y gcc-10
#         sudo update-alternatives \
#           --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 \
#           --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-10 \
#           --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-10 \
#           --slave /usr/bin/gcov gcov /usr/bin/gcov-10
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --compiler=g++ --no-inline --features=uses_wchar=1 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   ubuntu-18_04_gcc10_build:

#     runs-on: ubuntu-18.04

#     needs: ubuntu-18_04_gcc10_ACE_TAO

#     steps:
#     - name: install gcc
#       run: | 
#         sudo apt-get install -y gcc-10
#         sudo update-alternatives \
#           --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 \
#           --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-10 \
#           --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-10 \
#           --slave /usr/bin/gcov gcov /usr/bin/gcov-10
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ubuntu-18_04_gcc10_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ ubuntu-18_04_gcc10_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --compiler=g++ --no-inline --features=uses_wchar=1 --tests --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   # ubuntu-18_04_gcc10_test:

#   #   runs-on: ubuntu-18.04

#   #   needs: ubuntu-18_04_gcc10_build

#   #   steps:
#   #   - name: install gcc
#   #     run: | 
#   #       sudo apt-get install -y gcc-10
#   #       sudo update-alternatives \
#   #         --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 \
#   #         --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-10 \
#   #         --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-10 \
#   #         --slave /usr/bin/gcov gcov /usr/bin/gcov-10
#   #   - name: install xerces
#   #     run: sudo apt-get -y install libxerces-c-dev
#   #   - name: checkout MPC
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/MPC
#   #       path: MPC
#   #   - name: checkout autobuild
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/autobuild
#   #       path: autobuild
#   #   - name: checkout ACE_TAO
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/ACE_TAO
#   #       ref: ace6tao2
#   #       path: ACE_TAO
#   #   - name: download ACE_TAO artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_wchar_ACE_TAO_artifact
#   #       path: ACE_TAO
#   #   - name: extract ACE_TAO artifact
#   #     shell: bash
#   #     run: |
#   #       cd ACE_TAO
#   #       tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
#   #   - name: checkout OpenDDS
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       path: OpenDDS
#   #       submodules: true
#   #   - name: download OpenDDS artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-18_04_gcc10_build_artifact
#   #       path: OpenDDS
#   #   - name: extract OpenDDS artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       tar xvfJ ubuntu-18_04_gcc10_build.tar.xz
#   #   - name: check build configuration
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       tools/scripts/show_build_config.pl
#   #   - name: run OpenDDS tests
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       mkdir ${{ github.job }}_autobuild_workspace
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       echo using commit $TRIGGERING_COMMIT for SHA
#   #       echo $TRIGGERING_COMMIT >> ./SHA
#   #       cat > config.xml <<EOF
#   #       <autobuild>
#   #       <configuration>
#   #       <variable name="log_file" value="output.log"/>
#   #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="project_root" value="$DDS_ROOT"/>
#   #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="junit_xml_output" value="Tests"/>
#   #       </configuration>
#   #       <command name="log" options="on"/>
#   #       <command name="print_os_version"/>
#   #       <command name="print_env_vars"/>
#   #       <command name="print_ace_config"/>
#   #       <command name="print_make_version"/>
#   #       <command name="check_compiler" options="gcc"/>
#   #       <command name="print_perl_version"/>
#   #       <command name="print_autobuild_config"/>
#   #       <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config WCHAR -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS"/>
#   #       <command name="log" options="off"/>
#   #       <command name="process_logs" options="prettify"/>
#   #       </autobuild>
#   #       EOF
#   #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#   #   - name: upload autobuild output
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: ${{ github.job }}_autobuild_output
#   #       path: OpenDDS/${{ github.job }}_autobuild_workspace
#   #   - name: check results
#   #     shell: bash
#   #     run: |
#   #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#   #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   ubuntu-20_04_face_safety_ACE_TAO:

#     runs-on: ubuntu-20.04

#     steps:
#     - name: install gcc
#       run: | 
#         sudo apt-get install -y gcc-10
#         sudo update-alternatives \
#           --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 \
#           --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-10 \
#           --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-10 \
#           --slave /usr/bin/gcov gcov /usr/bin/gcov-10
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --compiler=g++ --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   ubuntu-20_04_face_safety_build:

#     runs-on: ubuntu-20.04

#     needs: ubuntu-20_04_face_safety_ACE_TAO

#     steps:
#     - name: install gcc
#       run: | 
#         sudo apt-get install -y gcc-10
#         sudo update-alternatives \
#           --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 \
#           --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-10 \
#           --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-10 \
#           --slave /usr/bin/gcov gcov /usr/bin/gcov-10
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ubuntu-20_04_face_safety_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ ubuntu-20_04_face_safety_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --compiler=g++ --safety-profile=base --tests --no-rapidjson --no-content-subscription --no-object-model-profile --no-persistence-profile --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS/build/target
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS/build/target
#         . setenv.sh
#         make -j4
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS/build/target
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   # ubuntu-20_04_face_safety_test:

#   #   runs-on: ubuntu-20.04

#   #   needs: ubuntu-20_04_face_safety_build

#   #   steps:
#   #   - name: install gcc
#   #     run: | 
#   #       sudo apt-get install -y gcc-10
#   #       sudo update-alternatives \
#   #         --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 \
#   #         --slave /usr/bin/gcc-ar gcc-ar /usr/bin/gcc-ar-10 \
#   #         --slave /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-10 \
#   #         --slave /usr/bin/gcov gcov /usr/bin/gcov-10
#   #   - name: install xerces
#   #     run: sudo apt-get -y install libxerces-c-dev
#   #   - name: checkout MPC
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/MPC
#   #       path: MPC
#   #   - name: checkout autobuild
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/autobuild
#   #       path: autobuild
#   #   - name: checkout ACE_TAO
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/ACE_TAO
#   #       ref: ace6tao2
#   #       path: ACE_TAO
#   #   - name: download ACE_TAO artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-20_04_face_safety_ACE_TAO_artifact
#   #       path: ACE_TAO
#   #   - name: extract ACE_TAO artifact
#   #     shell: bash
#   #     run: |
#   #       cd ACE_TAO
#   #       tar xvfJ ubuntu-20_04_face_safety_ACE_TAO.tar.xz
#   #   - name: checkout OpenDDS
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       path: OpenDDS
#   #       submodules: true
#   #   - name: download OpenDDS artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: ubuntu-20_04_face_safety_build_artifact
#   #       path: OpenDDS
#   #   - name: extract OpenDDS artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       tar xvfJ ubuntu-20_04_face_safety_build.tar.xz
#   #   - name: check build configuration
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       tools/scripts/show_build_config.pl
#   #   - name: run OpenDDS tests
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       . setenv.sh
#   #       mkdir ${{ github.job }}_autobuild_workspace
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       echo using commit $TRIGGERING_COMMIT for SHA
#   #       echo $TRIGGERING_COMMIT >> ./SHA
#   #       cat > config.xml <<EOF
#   #       <autobuild>
#   #       <configuration>
#   #       <variable name="log_file" value="output.log"/>
#   #       <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="project_root" value="$DDS_ROOT"/>
#   #       <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="junit_xml_output" value="Tests"/>
#   #       </configuration>
#   #       <command name="log" options="on"/>
#   #       <command name="print_os_version"/>
#   #       <command name="print_env_vars"/>
#   #       <command name="print_ace_config"/>
#   #       <command name="print_make_version"/>
#   #       <command name="check_compiler" options="gcc"/>
#   #       <command name="print_perl_version"/>
#   #       <command name="print_autobuild_config"/>
#   #       <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config OPENDDS_SAFETY_PROFILE -Config RTPS -Config DDS_NO_CONTENT_SUBSCRIPTION -Config DDS_NO_OWNERSHIP_PROFILE -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE -Config GH_ACTIONS"/>
#   #       <command name="log" options="off"/>
#   #       <command name="process_logs" options="prettify"/>
#   #       </autobuild>
#   #       EOF
#   #       $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#   #   - name: upload autobuild output
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: ${{ github.job }}_autobuild_output
#   #       path: OpenDDS/${{ github.job }}_autobuild_workspace
#   #   - name: check results
#   #     shell: bash
#   #     run: |
#   #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#   #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   jenkins_prb_ACE_TAO:

#     runs-on: ubuntu-20.04

#     steps:

#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   jenkins_prb_build:

#     runs-on: ubuntu-20.04

#     needs: jenkins_prb_ACE_TAO

#     steps:
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: install wireshark
#       run: sudo apt-get -y install wireshark-dev
#     - name: install qt
#       run: sudo apt-get -y install qtbase5-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: jenkins_prb_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ jenkins_prb_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --qt --wireshark= --tests --security --java --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4
#     - name: set up TAO Hello test
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         mwc.pl -type gnuace -workers 4 $TAO_ROOT/tests/Hello
#     - name: build TAO Hello test
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4 dir=$TAO_ROOT/tests/Hello
#     - name: set up Modeling tests
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd tools/modeling/tests
#         ./setup.pl
#         cd -
#         mwc.pl -type gnuace -workers 4 tools/modeling/tests/modeling_tests.mwc
#     - name: build Modeling tests
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4 -C tools/modeling/tests
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

# #   jenkins_prb_test:

# #     runs-on: ubuntu-20.04

# #     needs: jenkins_prb_build

# #     steps:
# #     - name: install xerces
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: jenkins_prb_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ jenkins_prb_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: jenkins_prb_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ jenkins_prb_build.tar.xz
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - name: run OpenDDS tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$DDS_ROOT"/>
# #         <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst -l tools/modeling/tests/modeling_tests.lst"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS/${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

# #   ubuntu-20_04_ipv6_ACE_TAO:

# #     runs-on: ubuntu-20.04

# #     steps:
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: OpenDDS/ACE_TAO
# #     - name: get ACE_TAO commit
# #       shell: bash
# #       run: |
# #         cd OpenDDS/ACE_TAO
# #         export ACE_COMMIT=$(git rev-parse HEAD)
# #         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
# #     - name: Cache Artifact
# #       id: cache-artifact
# #       uses: actions/cache@v2.1.4
# #       with:
# #         path: ${{ github.job }}.tar.xz
# #         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
# #     - name: install xerces
# #       if: steps.cache-artifact.outputs.cache-hit != 'true'
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       if: steps.cache-artifact.outputs.cache-hit != 'true'
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: configure OpenDDS
# #       if: steps.cache-artifact.outputs.cache-hit != 'true'
# #       run: |
# #         cd OpenDDS
# #         ./configure --ipv6 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
# #     - name: build ACE and TAO
# #       if: steps.cache-artifact.outputs.cache-hit != 'true'
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         cd ACE_TAO/ACE
# #         make -j4
# #         cd ../TAO
# #         make -j4
# #     - name: create ACE_TAO tar.xz artifact
# #       if: steps.cache-artifact.outputs.cache-hit != 'true'
# #       shell: bash
# #       run: |
# #         cd OpenDDS/ACE_TAO
# #         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
# #         find . -iname "*\.o" | xargs rm
# #         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
# #         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
# #         xz -3 ../../${{ github.job }}.tar
# #     - name: upload ACE_TAO artifact
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_artifact
# #         path: ${{ github.job }}.tar.xz

# #   ubuntu-20_04_ipv6_security_build:

# #     runs-on: ubuntu-20.04

# #     needs: ubuntu-20_04_ipv6_ACE_TAO

# #     steps:
# #     - name: install xerces
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-20_04_ipv6_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ ubuntu-20_04_ipv6_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: configure OpenDDS
# #       run: |
# #         cd OpenDDS
# #         ./configure --tests --security --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - uses: ammaraskar/gcc-problem-matcher@0.1
# #     - name: build OpenDDS
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         make -j4
# #     - name: create OpenDDS tar.xz artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         rm -rf ACE_TAO
# #         find . -iname "*\.o" | xargs rm
# #         tar cvf ../${{ github.job }}.tar setenv.sh
# #         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
# #         xz -3 ../${{ github.job }}.tar
# #     - name: upload OpenDDS artifact
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_artifact
# #         path: ${{ github.job }}.tar.xz

# #   ubuntu-20_04_ipv6_security_test:

# #     runs-on: ubuntu-20.04

# #     needs: ubuntu-20_04_ipv6_security_build

# #     steps:
# #     - name: install xerces
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-20_04_ipv6_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ ubuntu-20_04_ipv6_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-20_04_ipv6_security_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ ubuntu-20_04_ipv6_security_build.tar.xz
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - name: run OpenDDS tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$DDS_ROOT"/>
# #         <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config IPV6 -Config RTPS -Config LINUX -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS/${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

# #   ubuntu-20_04_ipv6_java_no-bit_build:

# #     runs-on: ubuntu-20.04

# #     needs: ubuntu-20_04_ipv6_ACE_TAO

# #     steps:
# #     - name: install xerces
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-20_04_ipv6_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ ubuntu-20_04_ipv6_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: configure OpenDDS
# #       run: |
# #         cd OpenDDS
# #         ./configure --tests --java=/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64 --no-built-in-topics --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - uses: ammaraskar/gcc-problem-matcher@0.1
# #     - name: build OpenDDS
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         make -j4
# #     - name: set up TAO Hello test
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         mwc.pl -type gnuace -workers 4 $TAO_ROOT/tests/Hello
# #     - name: build TAO Hello test
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         make -j4 dir=$TAO_ROOT/tests/Hello
# #     - name: set up Modeling tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         cd tools/modeling/tests
# #         ./setup.pl
# #         cd -
# #         mwc.pl -type gnuace -workers 4 -features built_in_topics=0 tools/modeling/tests/modeling_tests.mwc
# #     - name: build Modeling tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         make -j4 -C tools/modeling/tests
# #     - name: create OpenDDS tar.xz artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         rm -rf ACE_TAO
# #         find . -iname "*\.o" | xargs rm
# #         tar cvf ../${{ github.job }}.tar setenv.sh
# #         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
# #         xz -3 ../${{ github.job }}.tar
# #     - name: upload OpenDDS artifact
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_artifact
# #         path: ${{ github.job }}.tar.xz

# #   ubuntu-20_04_ipv6_java_no-bit_test:

# #     runs-on: ubuntu-20.04

# #     needs: ubuntu-20_04_ipv6_java_no-bit_build

# #     steps:
# #     - name: install xerces
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-20_04_ipv6_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ ubuntu-20_04_ipv6_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-20_04_ipv6_java_no-bit_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ ubuntu-20_04_ipv6_java_no-bit_build.tar.xz
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - name: run OpenDDS tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$DDS_ROOT"/>
# #         <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config IPV6 -Config RTPS -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst -l tools/modeling/tests/modeling_tests.lst"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS/${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

# #   # Ubuntu 18.04 - WChar

# #   ubuntu-18_04_wchar_ACE_TAO:

# #     runs-on: ubuntu-18.04

# #     steps:
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: OpenDDS/ACE_TAO
# #     - name: get ACE_TAO commit
# #       shell: bash
# #       run: |
# #         cd OpenDDS/ACE_TAO
# #         export ACE_COMMIT=$(git rev-parse HEAD)
# #         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
# #     - name: Cache Artifact
# #       id: cache-artifact
# #       uses: actions/cache@v2.1.4
# #       with:
# #         path: ${{ github.job }}.tar.xz
# #         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
# #     - name: install xerces
# #       if: steps.cache-artifact.outputs.cache-hit != 'true'
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       if: steps.cache-artifact.outputs.cache-hit != 'true'
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: configure OpenDDS
# #       if: steps.cache-artifact.outputs.cache-hit != 'true'
# #       run: |
# #         cd OpenDDS
# #         ./configure --features=uses_wchar=1 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
# #     - name: build ACE and TAO
# #       if: steps.cache-artifact.outputs.cache-hit != 'true'
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         cd ACE_TAO/ACE
# #         make -j4
# #         cd ../TAO
# #         make -j4
# #     - name: create ACE_TAO tar.xz artifact
# #       if: steps.cache-artifact.outputs.cache-hit != 'true'
# #       shell: bash
# #       run: |
# #         cd OpenDDS/ACE_TAO
# #         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
# #         find . -iname "*\.o" | xargs rm
# #         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
# #         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
# #         xz -3 ../../${{ github.job }}.tar
# #     - name: upload ACE_TAO artifact
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_artifact
# #         path: ${{ github.job }}.tar.xz

# #   ubuntu-18_04_wchar_security_build:

# #     runs-on: ubuntu-18.04

# #     needs: ubuntu-18_04_wchar_ACE_TAO

# #     steps:
# #     - name: install xerces
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-18_04_wchar_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: configure OpenDDS
# #       run: |
# #         cd OpenDDS
# #         ./configure --features=uses_wchar=1 --tests --security --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - uses: ammaraskar/gcc-problem-matcher@0.1
# #     - name: build OpenDDS
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         make -j4
# #     - name: create OpenDDS tar.xz artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         rm -rf ACE_TAO
# #         find . -iname "*\.o" | xargs rm
# #         tar cvf ../${{ github.job }}.tar setenv.sh
# #         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
# #         xz -3 ../${{ github.job }}.tar
# #     - name: upload OpenDDS artifact
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_artifact
# #         path: ${{ github.job }}.tar.xz

# #   ubuntu-18_04_wchar_security_test:

# #     runs-on: ubuntu-18.04

# #     needs: ubuntu-18_04_wchar_security_build

# #     steps:
# #     - name: install xerces
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-18_04_wchar_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-18_04_wchar_security_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ ubuntu-18_04_wchar_security_build.tar.xz
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - name: run OpenDDS tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$DDS_ROOT"/>
# #         <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config WCHAR -Config RTPS -Config LINUX -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS/${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

# #   ubuntu-18_04_wchar_java_no-csp_build:

# #     runs-on: ubuntu-18.04

# #     needs: ubuntu-18_04_wchar_ACE_TAO

# #     steps:
# #     - name: install xerces
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-18_04_wchar_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: configure OpenDDS
# #       run: |
# #         cd OpenDDS
# #         ./configure --features=uses_wchar=1 --tests --java --no-content-subscription --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - uses: ammaraskar/gcc-problem-matcher@0.1
# #     - name: build OpenDDS
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         make -j4
# #     - name: set up TAO Hello test
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         mwc.pl -type gnuace -workers 4 $TAO_ROOT/tests/Hello
# #     - name: build TAO Hello test
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         make -j4 dir=$TAO_ROOT/tests/Hello
# #     - name: set up Modeling tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         cd tools/modeling/tests
# #         ./setup.pl
# #         cd -
# #         mwc.pl -type gnuace -workers 4 -features content_subscription=0 tools/modeling/tests/modeling_tests.mwc
# #     - name: build Modeling tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         make -j4 -C tools/modeling/tests
# #     - name: create OpenDDS tar.xz artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         rm -rf ACE_TAO
# #         find . -iname "*\.o" | xargs rm
# #         tar cvf ../${{ github.job }}.tar setenv.sh
# #         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
# #         xz -3 ../${{ github.job }}.tar
# #     - name: upload OpenDDS artifact
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_artifact
# #         path: ${{ github.job }}.tar.xz

# #   ubuntu-18_04_wchar_java_no-csp_test:

# #     runs-on: ubuntu-18.04

# #     needs: ubuntu-18_04_wchar_java_no-csp_build

# #     steps:
# #     - name: install xerces
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-18_04_wchar_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ ubuntu-18_04_wchar_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-18_04_wchar_java_no-csp_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ ubuntu-18_04_wchar_java_no-csp_build.tar.xz
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - name: run OpenDDS tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$DDS_ROOT"/>
# #         <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config WCHAR -Config RTPS -Config CXX11 -Config RAPIDJSON -Config DDS_NO_CONTENT_SUBSCRIPTION -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst -l tools/modeling/tests/modeling_tests.lst"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS/${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

# #   # Ubuntu 16.04 - Defaults

#   ubuntu-16_04_defaults_ACE_TAO:

#     runs-on: ubuntu-16.04

#     steps:
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --static --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   ubuntu-16_04_defaults_security_build:

#     runs-on: ubuntu-16.04

#     needs: ubuntu-16_04_defaults_ACE_TAO

#     steps:
#     - name: install xerces
#       run: sudo apt-get -y install libxerces-c-dev
#     - name: install wireshark
#       run: sudo apt-get -y install wireshark-dev
#     - name: install qt
#       run: sudo apt-get -y install qtbase5-dev
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ubuntu-16_04_defaults_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ ubuntu-16_04_defaults_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --static --qt --wireshark --tests --security --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

# #   ubuntu-16_04_defaults_security_test:

# #     runs-on: ubuntu-16.04

# #     needs: ubuntu-16_04_defaults_security_build

# #     steps:
# #     - name: install xerces
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-16_04_defaults_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ ubuntu-16_04_defaults_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-16_04_defaults_security_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ ubuntu-16_04_defaults_security_build.tar.xz
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - name: run OpenDDS tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$DDS_ROOT"/>
# #         <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config STATIC -Config LINUX -Config XERCES3 -Config OPENDDS_SECURITY -Config RAPIDJSON -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS/${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

# #   ubuntu-16_04_defaults_java_no-cft_build:

# #     runs-on: ubuntu-16.04

# #     needs: ubuntu-16_04_defaults_ACE_TAO

# #     steps:
# #     - name: install xerces
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-16_04_defaults_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ ubuntu-16_04_defaults_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: configure OpenDDS
# #       run: |
# #         cd OpenDDS
# #         ./configure --static --tests --java --no-content-filtered-topic --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - uses: ammaraskar/gcc-problem-matcher@0.1
# #     - name: build OpenDDS
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         make -j4
# #     - name: set up TAO Hello test
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         mwc.pl -type gnuace -workers 4 $TAO_ROOT/tests/Hello
# #     - name: build TAO Hello test
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         make -j4 dir=$TAO_ROOT/tests/Hello
# #     - name: set up Modeling tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         cd tools/modeling/tests
# #         ./setup.pl
# #         cd -
# #         mwc.pl -type gnuace -workers 4 -features content_filtered_topic=0 tools/modeling/tests/modeling_tests.mwc
# #     - name: build Modeling tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         make -j4 -C tools/modeling/tests
# #     - name: create OpenDDS tar.xz artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         rm -rf ACE_TAO
# #         find . -iname "*\.o" | xargs rm
# #         tar cvf ../${{ github.job }}.tar setenv.sh
# #         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
# #         xz -3 ../${{ github.job }}.tar
# #     - name: upload OpenDDS artifact
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_artifact
# #         path: ${{ github.job }}.tar.xz

# #   ubuntu-16_04_defaults_java_no-cft_test:

# #     runs-on: ubuntu-16.04

# #     needs: ubuntu-16_04_defaults_java_no-cft_build

# #     steps:
# #     - name: install xerces
# #       run: sudo apt-get -y install libxerces-c-dev
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-16_04_defaults_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ ubuntu-16_04_defaults_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: ubuntu-16_04_defaults_java_no-cft_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ ubuntu-16_04_defaults_java_no-cft_build.tar.xz
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - name: run OpenDDS tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$DDS_ROOT"/>
# #         <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config RAPIDJSON -Config STATIC -Config DDS_NO_CONTENT_FILTERED_TOPIC -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst -l tools/modeling/tests/modeling_tests.lst"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS/${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

# #   # Windows 2019 - Defaults

#   windows-2019_static_ipv6_ACE_TAO:

#     runs-on: windows-2019

#     steps:
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install openssl-windows & xerces-c
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: lukka/run-vcpkg@v6
#       with:
#         vcpkgGitCommitId: ec6fe06
#         vcpkgArguments: --recurse openssl-windows xerces-c
#         vcpkgTriplet: x64-windows
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: set up msvc env
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: ilammy/msvc-dev-cmd@v1.5.0
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: cmd
#       run: |
#         cd OpenDDS
#         configure --ipv6 --static --tests --security --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows --mpcopts=-hierarchy
#     - name: build ACE & TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         cd ACE_TAO\ACE
#         msbuild -p:Configuration=Debug,Platform=x64 -m ace.sln
#         cd ..\TAO
#         msbuild -p:Configuration=Debug,Platform=x64 -m tao.sln
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.obj" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   windows-2019_static_ipv6_build:

#     runs-on: windows-2019

#     needs: windows-2019_static_ipv6_ACE_TAO

#     steps:
#     - name: install openssl-windows & xerces-c
#       uses: lukka/run-vcpkg@v6
#       with:
#         vcpkgGitCommitId: ec6fe06
#         vcpkgArguments: --recurse openssl-windows xerces-c
#         vcpkgTriplet: x64-windows
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: windows-2019_static_ipv6_ACE_TAO_artifact
#         path: OpenDDS/ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         tar xvfJ windows-2019_static_ipv6_ACE_TAO.tar.xz
#         rm -f windows-2019_static_ipv6_ACE_TAO.tar.xz
#     - uses: ammaraskar/msvc-problem-matcher@0.1
#     - name: set up msvc env
#       uses: ilammy/msvc-dev-cmd@v1.5.0
#     - name: configure OpenDDS
#       shell: cmd
#       run: |
#         cd OpenDDS
#         configure --ipv6 --static --tests --no-rapidjson --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows
#     - name: check build configuration
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         perl tools\scripts\show_build_config.pl
#     - name: build OpenDDS
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         msbuild -p:Configuration=Static Debug,Platform=x64 -m DDS.sln
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.cmd
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

# #   windows-2019_static_ipv6_test:

# #     runs-on: windows-2019

# #     needs: windows-2019_static_ipv6_build

# #     steps:
# #     - name: install openssl-windows & xerces-c
# #       uses: lukka/run-vcpkg@v6
# #       with:
# #         vcpkgGitCommitId: ec6fe06
# #         vcpkgArguments: --recurse openssl-windows xerces-c
# #         vcpkgTriplet: x86_64-windows
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: OpenDDS/ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: windows-2019_static_ipv6_ACE_TAO_artifact
# #         path: OpenDDS/ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS/ACE_TAO
# #         tar xvfJ windows-2019_static_ipv6_ACE_TAO.tar.xz
# #         rm -f windows-2019_static_ipv6_ACE_TAO.tar.xz
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: windows-2019_static_ipv6_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ windows-2019_static_ipv6_build.tar.xz
# #         rm -f windows-2019_static_ipv6_build.tar.xz
# #     - name: check build configuration
# #       shell: cmd
# #       run: |
# #         cd OpenDDS
# #         call setenv.cmd
# #         perl tools\scripts\show_build_config.pl
# #     - name: create autobuild config
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$FS_GHW/OpenDDS"/>
# #         <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$FS_GHW/OpenDDS -ExeSubDir Static_Debug -Config STATIC -Config IPV6 -Config RTPS -Config GH_ACTIONS"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         cat config.xml
# #     - name: run OpenDDS tests
# #       shell: cmd
# #       run: |
# #         cd OpenDDS
# #         call setenv.cmd
# #         cd ${{ github.job }}_autobuild_workspace
# #         perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS\${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   windows-2019_cpp03_static_wofeatures_ACE_TAO:

#     runs-on: windows-2019

#     steps:
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install openssl-windows & xerces-c
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: lukka/run-vcpkg@v6
#       with:
#         vcpkgGitCommitId: ec6fe06
#         vcpkgArguments: --recurse openssl-windows xerces-c
#         vcpkgTriplet: x86_64-windows
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: set up msvc env
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: ilammy/msvc-dev-cmd@v1.5.0
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: cmd
#       run: |
#         cd OpenDDS
#         configure --ipv6 --std=c++03 --static --tests --security --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x86_64-windows --openssl=%VCPKG_ROOT%/installed/x86_64-windows --mpcopts=-hierarchy
#     - name: build ACE & TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         cd ACE_TAO\ACE
#         msbuild -p:Configuration=Release,Platform=x86_64 -m ace.sln
#         cd ..\TAO
#         msbuild -p:Configuration=Release,Platform=x86_64 -m tao.sln
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.obj" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   windows-2019_cpp03_static_wofeatures_build:

#     runs-on: windows-2019

#     needs: windows-2019_cpp03_static_wofeatures_ACE_TAO

#     steps:
#     - name: install openssl-windows & xerces-c
#       uses: lukka/run-vcpkg@v6
#       with:
#         vcpkgGitCommitId: ec6fe06
#         vcpkgArguments: --recurse openssl-windows xerces-c
#         vcpkgTriplet: x86_64-windows
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: windows-2019_cpp03_static_wofeatures_ACE_TAO_artifact
#         path: OpenDDS/ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         tar xvfJ windows-2019_cpp03_static_wofeatures_ACE_TAO.tar.xz
#         rm -f windows-2019_cpp03_static_wofeatures_ACE_TAO.tar.xz
#     - uses: ammaraskar/msvc-problem-matcher@0.1
#     - name: set up msvc env
#       uses: ilammy/msvc-dev-cmd@v1.5.0
#     - name: configure OpenDDS
#       shell: cmd
#       run: |
#         cd OpenDDS
#         configure --ipv6 --std=c++03 --static --tests --rapidjson --no-built-in-topics --no-content-subscription --no-ownership-profile --no-object-model-profile --no-persistence-profile --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x86_64-windows --openssl=%VCPKG_ROOT%/installed/x86_64-windows
#     - name: check build configuration
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         perl tools\scripts\show_build_config.pl
#     - name: build OpenDDS
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         msbuild -p:Configuration=Static_Release,Platform=x86_64 -m DDS.sln
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.cmd
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

# #   windows-2019_cpp03_static_wofeatures_test:

# #     runs-on: windows-2019

# #     needs: windows-2019_cpp03_static_wofeatures_build

# #     steps:
# #     - name: install openssl-windows & xerces-c
# #       uses: lukka/run-vcpkg@v6
# #       with:
# #         vcpkgGitCommitId: ec6fe06
# #         vcpkgArguments: --recurse openssl-windows xerces-c
# #         vcpkgTriplet: x86_64-windows
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: OpenDDS/ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: windows-2019_cpp03_static_wofeatures_ACE_TAO_artifact
# #         path: OpenDDS/ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS/ACE_TAO
# #         tar xvfJ windows-2019_cpp03_static_wofeatures_ACE_TAO.tar.xz
# #         rm -f windows-2019_cpp03_static_wofeatures_ACE_TAO.tar.xz
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: windows-2019_cpp03_static_wofeatures_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ windows-2019_cpp03_static_wofeatures_build.tar.xz
# #         rm -f windows-2019_cpp03_static_wofeatures_build.tar.xz
# #     - name: check build configuration
# #       shell: cmd
# #       run: |
# #         cd OpenDDS
# #         call setenv.cmd
# #         perl tools\scripts\show_build_config.pl
# #     - name: create autobuild config
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$FS_GHW/OpenDDS"/>
# #         <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$FS_GHW/OpenDDS -ExeSubDir Static_Release -Config STATIC -Config NO_BUILT_IN_TOPICS -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_OWNERSHIP_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE -Config DDS_NO_CONTENT_SUBSCRIPTION -Config IPV6 -Config RTPS -Config OPENDDS_SECURITY -Config RAPIDJSON -Config GH_ACTIONS"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         cat config.xml
# #     - name: run OpenDDS tests
# #       shell: cmd
# #       run: |
# #         cd OpenDDS
# #         call setenv.cmd
# #         cd ${{ github.job }}_autobuild_workspace
# #         perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS\${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  windows-2019_defaults_ACE_TAO:

    runs-on: windows-2019

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.4
      with:
        path: ${{ github.job }}.tar.xz
        key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install openssl-windows & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: ec6fe06
        vcpkgArguments: --recurse openssl-windows xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1.5.0
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        configure --optimize --ipv6 --tests --security --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows --mpcopts=-hierarchy
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Debug,Platform=x64 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Debug,Platform=x64 -m tao.sln
    - name: gitclean
      shell: bash
      run: |
        touch output.txt
        cd OpenDDS
        git clean -nd -e ext | tee ../output.txt
        [ -s output.txt ]
        if [$? 1]; then echo "the build is clean"; "else echo "exit 1"; fi
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  # windows-2019_defaults_security_build:

  #   runs-on: windows-2019

  #   needs: windows-2019_defaults_ACE_TAO

  #   steps:
  #   - name: install openssl-windows & xerces-c
  #     uses: lukka/run-vcpkg@v6
  #     with:
  #       vcpkgGitCommitId: ec6fe06
  #       vcpkgArguments: --recurse openssl-windows xerces-c
  #       vcpkgTriplet: x64-windows
  #   - name: checkout MPC
  #     uses: actions/checkout@v2.3.4
  #     with:
  #       repository: DOCGroup/MPC
  #       path: MPC
  #   - name: checkout OpenDDS
  #     uses: actions/checkout@v2.3.4
  #     with:
  #       path: OpenDDS
  #       submodules: true
  #   - name: checkout ACE_TAO
  #     uses: actions/checkout@v2.3.4
  #     with:
  #       repository: DOCGroup/ACE_TAO
  #       ref: ace6tao2
  #       path: OpenDDS/ACE_TAO
  #   - name: download ACE_TAO artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: windows-2019_defaults_ACE_TAO_artifact
  #       path: OpenDDS/ACE_TAO
  #   - name: extract ACE_TAO artifact
  #     shell: bash
  #     run: |
  #       cd OpenDDS/ACE_TAO
  #       tar xvfJ windows-2019_defaults_ACE_TAO.tar.xz
  #       rm -f windows-2019_defaults_ACE_TAO.tar.xz
  #   - uses: ammaraskar/msvc-problem-matcher@0.1
  #   - name: set up msvc env
  #     uses: ilammy/msvc-dev-cmd@v1.5.0
  #   - name: configure OpenDDS
  #     shell: cmd
  #     run: |
  #       cd OpenDDS
  #       configure --optimize --ipv6 --tests --rapidjson --security --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows
  #   - name: check build configuration
  #     shell: cmd
  #     run: |
  #       cd OpenDDS
  #       call setenv.cmd
  #       perl tools\scripts\show_build_config.pl
  #   - name: build OpenDDS
  #     shell: cmd
  #     run: |
  #       cd OpenDDS
  #       call setenv.cmd
  #       msbuild -p:Configuration=Debug,Platform=x64 -m DDS.sln
  #   - name: create OpenDDS tar.xz artifact
  #     shell: bash
  #     run: |
  #       cd OpenDDS
  #       rm -rf ACE_TAO
  #       find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
  #       tar cvf ../${{ github.job }}.tar setenv.cmd
  #       git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
  #       xz -3 ../${{ github.job }}.tar
  #   - name: upload OpenDDS artifact
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: ${{ github.job }}_artifact
  #       path: ${{ github.job }}.tar.xz

# #   windows-2019_defaults_security_test:

# #     runs-on: windows-2019

# #     needs: windows-2019_defaults_security_build

# #     steps:
# #     - name: install openssl-windows & xerces-c
# #       uses: lukka/run-vcpkg@v6
# #       with:
# #         vcpkgGitCommitId: ec6fe06
# #         vcpkgArguments: --recurse openssl-windows xerces-c
# #         vcpkgTriplet: x64-windows
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: OpenDDS/ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: windows-2019_defaults_ACE_TAO_artifact
# #         path: OpenDDS/ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS/ACE_TAO
# #         tar xvfJ windows-2019_defaults_ACE_TAO.tar.xz
# #         rm -f windows-2019_defaults_ACE_TAO.tar.xz
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: windows-2019_defaults_security_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ windows-2019_defaults_security_build.tar.xz
# #         rm -f windows-2019_defaults_security_build.tar.xz
# #     - name: check build configuration
# #       shell: cmd
# #       run: |
# #         cd OpenDDS
# #         call setenv.cmd
# #         perl tools\scripts\show_build_config.pl
# #     - name: create autobuild config
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$FS_GHW/OpenDDS"/>
# #         <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$FS_GHW/OpenDDS -Config RTPS -Config WIN32 -Config IPV6 -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         cat config.xml
# #     - name: run OpenDDS tests
# #       shell: cmd
# #       run: |
# #         cd OpenDDS
# #         call setenv.cmd
# #         cd ${{ github.job }}_autobuild_workspace
# #         perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS\${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   windows-2019_defaults_java_ACE_TAO:

#     runs-on: windows-2019

#     steps:
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install openssl-windows & xerces-c
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: lukka/run-vcpkg@v6
#       with:
#         vcpkgGitCommitId: ec6fe06
#         vcpkgArguments: --recurse openssl-windows xerces-c
#         vcpkgTriplet: x64-windows
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: set up msvc env
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: ilammy/msvc-dev-cmd@v1.5.0
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: cmd
#       run: |
#         cd OpenDDS
#         configure --tests --security --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows --mpcopts=-hierarchy
#     - name: build ACE & TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         cd ACE_TAO\ACE
#         msbuild -p:Configuration=Debug,Platform=x64 -m ace.sln
#         cd ..\TAO
#         msbuild -p:Configuration=Debug,Platform=x64 -m tao.sln
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.obj" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   windows-2019_defaults_java_no-bit_build:

#     runs-on: windows-2019

#     needs: windows-2019_defaults_java_ACE_TAO

#     steps:
#     - name: install xerces-c
#       uses: lukka/run-vcpkg@v6
#       with:
#         vcpkgGitCommitId: ec6fe06
#         vcpkgArguments: --recurse xerces-c
#         vcpkgTriplet: x64-windows
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: windows-2019_defaults_java_ACE_TAO_artifact
#         path: OpenDDS/ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         tar xvfJ windows-2019_defaults_java_ACE_TAO.tar.xz
#         rm -f windows-2019_defaults_java_ACE_TAO.tar.xz
#     - uses: ammaraskar/msvc-problem-matcher@0.1
#     - name: set up msvc env
#       uses: ilammy/msvc-dev-cmd@v1.5.0
#     - name: configure OpenDDS
#       shell: cmd
#       run: |
#         cd OpenDDS
#         configure --tests --java --no-built-in-topics --rapidjson --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows
#     - name: check build configuration
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         perl tools\scripts\show_build_config.pl
#     - name: build OpenDDS
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         msbuild -p:Configuration=Debug,Platform=x64 -m DDS.sln
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.cmd
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   # windows-2019_defaults_java_no-bit_test:

#   #   runs-on: windows-2019

#   #   needs: windows-2019_defaults_java_no-bit_build

#   #   steps:
#   #   - name: install xerces-c
#   #     uses: lukka/run-vcpkg@v6
#   #     with:
#   #       vcpkgGitCommitId: ec6fe06
#   #       vcpkgArguments: --recurse xerces-c
#   #       vcpkgTriplet: x64-windows
#   #   - name: checkout MPC
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/MPC
#   #       path: MPC
#   #   - name: checkout autobuild
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/autobuild
#   #       path: autobuild
#   #   - name: checkout OpenDDS
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       path: OpenDDS
#   #       submodules: true
#   #   - name: checkout ACE_TAO
#   #     uses: actions/checkout@v2.3.4
#   #     with:
#   #       repository: DOCGroup/ACE_TAO
#   #       ref: ace6tao2
#   #       path: OpenDDS/ACE_TAO
#   #   - name: download ACE_TAO artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: windows-2019_defaults_java_ACE_TAO_artifact
#   #       path: OpenDDS/ACE_TAO
#   #   - name: extract ACE_TAO artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS/ACE_TAO
#   #       tar xvfJ windows-2019_defaults_java_ACE_TAO.tar.xz
#   #       rm -f windows-2019_defaults_java_ACE_TAO.tar.xz
#   #   - name: download OpenDDS artifact
#   #     uses: actions/download-artifact@v2
#   #     with:
#   #       name: windows-2019_defaults_java_no-bit_build_artifact
#   #       path: OpenDDS
#   #   - name: extract OpenDDS artifact
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       tar xvfJ windows-2019_defaults_java_no-bit_build.tar.xz
#   #       rm -f windows-2019_defaults_java_no-bit_build.tar.xz
#   #   - name: check build configuration
#   #     shell: cmd
#   #     run: |
#   #       cd OpenDDS
#   #       call setenv.cmd
#   #       perl tools\scripts\show_build_config.pl
#   #   - name: create autobuild config
#   #     shell: bash
#   #     run: |
#   #       cd OpenDDS
#   #       mkdir ${{ github.job }}_autobuild_workspace
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
#   #       echo using commit $TRIGGERING_COMMIT for SHA
#   #       echo $TRIGGERING_COMMIT >> ./SHA
#   #       cat > config.xml <<EOF
#   #       <autobuild>
#   #       <configuration>
#   #       <variable name="log_file" value="output.log"/>
#   #       <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="project_root" value="$FS_GHW/OpenDDS"/>
#   #       <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
#   #       <variable name="junit_xml_output" value="Tests"/>
#   #       </configuration>
#   #       <command name="log" options="on"/>
#   #       <command name="print_os_version"/>
#   #       <command name="print_env_vars"/>
#   #       <command name="print_ace_config"/>
#   #       <command name="print_make_version"/>
#   #       <command name="check_compiler" options="gcc"/>
#   #       <command name="print_perl_version"/>
#   #       <command name="print_autobuild_config"/>
#   #       <command name="auto_run_tests" options="dir=$FS_GHW/OpenDDS -Config RTPS -Config WIN32 -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS"/>
#   #       <command name="log" options="off"/>
#   #       <command name="process_logs" options="prettify"/>
#   #       </autobuild>
#   #       EOF
#   #       cat config.xml
#   #   - name: run OpenDDS tests
#   #     shell: cmd
#   #     run: |
#   #       cd OpenDDS
#   #       call setenv.cmd
#   #       cd ${{ github.job }}_autobuild_workspace
#   #       perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
#   #   - name: upload autobuild output
#   #     uses: actions/upload-artifact@v2
#   #     with:
#   #       name: ${{ github.job }}_autobuild_output
#   #       path: OpenDDS\${{ github.job }}_autobuild_workspace
#   #   - name: check results
#   #     shell: bash
#   #     run: |
#   #       cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#   #       if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   # Windows 2016 - x86, No Debug, No Inline

#   clayton_windows-2016_x86_no-debug_no-inline_ACE_TAO:

#     runs-on: windows-2016

#     steps:
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install openssl-windows & xerces-c
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: lukka/run-vcpkg@v6
#       with:
#         vcpkgGitCommitId: ec6fe06
#         vcpkgArguments: --recurse openssl-windows xerces-c
#         vcpkgTriplet: x86-windows
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: set up msvc env
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: ilammy/msvc-dev-cmd@v1.5.0
#       with:
#         arch: x86
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: cmd
#       run: |
#         cd OpenDDS
#         configure --no-debug --no-inline --tests --security --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x86-windows --openssl=%VCPKG_ROOT%/installed/x86-windows --mpcopts=-hierarchy
#     - name: build ACE & TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         cd ACE_TAO\ACE
#         msbuild -p:Configuration=Release,Platform=Win32 -m ace.sln
#         cd ..\TAO
#         msbuild -p:Configuration=Release,Platform=Win32 -m tao.sln
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.obj" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   clayton_windows-2016_x86_no-debug_no-inline_security_build:

#     runs-on: windows-2016

#     needs: clayton_windows-2016_x86_no-debug_no-inline_ACE_TAO

#     steps:
#     - name: install openssl-windows & xerces-c
#       uses: lukka/run-vcpkg@v6
#       with:
#         vcpkgGitCommitId: ec6fe06
#         vcpkgArguments: --recurse openssl-windows xerces-c
#         vcpkgTriplet: x86-windows
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: clayton_windows-2016_x86_no-debug_no-inline_ACE_TAO_artifact
#         path: OpenDDS/ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         tar xvfJ clayton_windows-2016_x86_no-debug_no-inline_ACE_TAO.tar.xz
#         rm -f clayton_windows-2016_x86_no-debug_no-inline_ACE_TAO.tar.xz
#         find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
#     - name: Move ACE and MPC to C Drive
#       shell: bash
#       run: |
#         mv OpenDDS/ACE_TAO /c/
#         mv MPC /c/
#     - uses: ammaraskar/msvc-problem-matcher@0.1
#     - name: set up msvc env
#       uses: ilammy/msvc-dev-cmd@v1.5.0
#       with:
#         arch: x86
#     - name: configure OpenDDS
#       shell: cmd
#       run: |
#         cd OpenDDS
#         configure --tests --rapidjson --security --ace="C:\ACE_TAO\ACE" --tao="C:\ACE_TAO\TAO" --mpc="C:\MPC" --xerces3="%VCPKG_ROOT%\installed\x86-windows" --openssl="%VCPKG_ROOT%\installed\x86-windows"
#     - name: check build configuration
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         perl tools\scripts\show_build_config.pl
#     - name: build OpenDDS
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         msbuild -p:Configuration=Release,Platform=Win32 -m DDS.sln
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.cmd
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

# #   windows-2016_x86_no-debug_no-inline_security_test:

# #     runs-on: windows-2016

# #     needs: windows-2016_x86_no-debug_no-inline_security_build

# #     steps:
# #     - name: install openssl-windows & xerces-c
# #       uses: lukka/run-vcpkg@v6
# #       with:
# #         vcpkgGitCommitId: ec6fe06
# #         vcpkgArguments: --recurse openssl-windows xerces-c
# #         vcpkgTriplet: x86-windows
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: OpenDDS/ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: windows-2016_x86_no-debug_no-inline_ACE_TAO_artifact
# #         path: OpenDDS/ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS/ACE_TAO
# #         tar xvfJ windows-2016_x86_no-debug_no-inline_ACE_TAO.tar.xz
# #         rm -f windows-2016_x86_no-debug_no-inline_ACE_TAO.tar.xz
# #         find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
# #     - name: Move ACE and MPC to C Drive
# #       shell: bash
# #       run: |
# #         mv OpenDDS/ACE_TAO /c/
# #         mv MPC /c/
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: windows-2016_x86_no-debug_no-inline_security_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ windows-2016_x86_no-debug_no-inline_security_build.tar.xz
# #         rm -f windows-2016_x86_no-debug_no-inline_security_build.tar.xz
# #     - name: check build configuration
# #       shell: cmd
# #       run: |
# #         cd OpenDDS
# #         call setenv.cmd
# #         perl tools\scripts\show_build_config.pl
# #     - name: create autobuild config
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$FS_GHW/OpenDDS"/>
# #         <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$FS_GHW/OpenDDS -Config RTPS -Config WIN32 -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         cat config.xml
# #     - name: run OpenDDS tests
# #       shell: cmd
# #       run: |
# #         cd OpenDDS
# #         call setenv.cmd
# #         cd ${{ github.job }}_autobuild_workspace
# #         perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS\${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# # #        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   clayton_windows-2016_x86_no-debug_no-inline_java_no-bit_build:

#     runs-on: windows-2016

#     needs: clayton_windows-2016_x86_no-debug_no-inline_ACE_TAO

#     steps:
#     - name: install xerces-c
#       uses: lukka/run-vcpkg@v6
#       with:
#         vcpkgGitCommitId: ec6fe06
#         vcpkgArguments: --recurse xerces-c
#         vcpkgTriplet: x86-windows
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: clayton_windows-2016_x86_no-debug_no-inline_ACE_TAO_artifact
#         path: OpenDDS/ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         tar xvfJ clayton_windows-2016_x86_no-debug_no-inline_ACE_TAO.tar.xz
#         rm -f clayton_windows-2016_x86_no-debug_no-inline_ACE_TAO.tar.xz
#         find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
#     - name: Move ACE and MPC to C Drive
#       shell: bash
#       run: |
#         mv OpenDDS/ACE_TAO /c/
#         mv MPC /c/
#     - uses: ammaraskar/msvc-problem-matcher@0.1
#     - name: set up msvc env
#       uses: ilammy/msvc-dev-cmd@v1.5.0
#       with:
#         arch: x86
#     - name: configure OpenDDS
#       shell: cmd
#       run: |
#         cd OpenDDS
#         configure --tests --java --no-built-in-topics --rapidjson --ace="C:\ACE_TAO\ACE" --tao="C:\ACE_TAO\TAO" --mpc="C:\MPC" --xerces3="%VCPKG_ROOT%\installed\x86-windows"
#     - name: check build configuration
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         perl tools\scripts\show_build_config.pl
#     - name: build OpenDDS
#       shell: cmd
#       run: |
#         cd OpenDDS
#         call setenv.cmd
#         msbuild -p:Configuration=Release,Platform=Win32 -m DDS.sln
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.cmd
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

# #   windows-2016_x86_no-debug_no-inline_java_no-bit_test:

# #     runs-on: windows-2016

# #     needs: windows-2016_x86_no-debug_no-inline_java_no-bit_build

# #     steps:
# #     - name: install xerces-c
# #       uses: lukka/run-vcpkg@v6
# #       with:
# #         vcpkgGitCommitId: ec6fe06
# #         vcpkgArguments: --recurse xerces-c
# #         vcpkgTriplet: x86-windows
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: OpenDDS/ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: windows-2016_x86_no-debug_no-inline_ACE_TAO_artifact
# #         path: OpenDDS/ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS/ACE_TAO
# #         tar xvfJ windows-2016_x86_no-debug_no-inline_ACE_TAO.tar.xz
# #         rm -f windows-2016_x86_no-debug_no-inline_ACE_TAO.tar.xz
# #         find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
# #     - name: Move ACE and MPC to C Drive
# #       shell: bash
# #       run: |
# #         mv OpenDDS/ACE_TAO /c/
# #         mv MPC /c/
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: windows-2016_x86_no-debug_no-inline_java_no-bit_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ windows-2016_x86_no-debug_no-inline_java_no-bit_build.tar.xz
# #         rm -f windows-2016_x86_no-debug_no-inline_java_no-bit_build.tar.xz
# #     - name: check build configuration
# #       shell: cmd
# #       run: |
# #         cd OpenDDS
# #         call setenv.cmd
# #         perl tools\scripts\show_build_config.pl
# #     - name: create autobuild config
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$FS_GHW/OpenDDS"/>
# #         <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$FS_GHW/OpenDDS -Config RTPS -Config WIN32 -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         cat config.xml
# #     - name: run OpenDDS tests
# #       shell: cmd
# #       run: |
# #         cd OpenDDS
# #         call setenv.cmd
# #         cd ${{ github.job }}_autobuild_workspace
# #         perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS\${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   # macOS 11.0

# #  macos-11_0_defaults_ACE_TAO:

# #    runs-on: macos-11.0

# #    steps:
# #    - name: checkout OpenDDS
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        path: OpenDDS
# #        submodules: true
# #    - name: checkout ACE_TAO
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        repository: DOCGroup/ACE_TAO
# #        ref: 9eae9c11f1bcd07b48c74820d8cb4c67aca9ef23 # Update to 6_5_13 when available
# #        path: OpenDDS/ACE_TAO
# #    - name: get ACE_TAO commit
# #      shell: bash
# #      run: |
# #        cd OpenDDS/ACE_TAO
# #        export ACE_COMMIT=$(git rev-parse HEAD)
# #        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
# #    - name: Cache Artifact
# #      id: cache-artifact
# #      uses: actions/cache@v2.1.4
# #      with:
# #        path: ${{ github.job }}.tar.xz
# #        key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
# #    - name: install xerces-c
# #      if: steps.cache-artifact.outputs.cache-hit != 'true'
# #      run: |
# #        brew install xerces-c
# #    - name: checkout MPC
# #      if: steps.cache-artifact.outputs.cache-hit != 'true'
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        repository: DOCGroup/MPC
# #        path: MPC
# #    - name: configure OpenDDS
# #      if: steps.cache-artifact.outputs.cache-hit != 'true'
# #      run: |
# #        cd OpenDDS
# #        ./configure --std=c++11 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl/
# #    - name: build ACE and TAO
# #      if: steps.cache-artifact.outputs.cache-hit != 'true'
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        cd ACE_TAO/ACE
# #        make -j4
# #        cd ../TAO
# #        make -j4
# #    - name: create ACE_TAO tar.xz artifact
# #      if: steps.cache-artifact.outputs.cache-hit != 'true'
# #      shell: bash
# #      run: |
# #        cd OpenDDS/ACE_TAO
# #        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
# #        find . -iname "*\.o" | xargs rm
# #        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
# #        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
# #        xz -3 ../../${{ github.job }}.tar
# #    - name: upload ACE_TAO artifact
# #      uses: actions/upload-artifact@v2
# #      with:
# #        name: ${{ github.job }}_artifact
# #        path: ${{ github.job }}.tar.xz

# #  macos-11_0_defaults_security_build:

# #    runs-on: macos-11.0

# #    needs: macos-11_0_defaults_ACE_TAO

# #    steps:
# #    - name: install xerces-c
# #      run: |
# #        brew install xerces-c
# #    - name: checkout MPC
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        repository: DOCGroup/MPC
# #        path: MPC
# #    - name: checkout ACE_TAO
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        repository: DOCGroup/ACE_TAO
# #        ref: 9eae9c11f1bcd07b48c74820d8cb4c67aca9ef23 # Update to 6_5_13 when available
# #        path: ACE_TAO
# #    - name: download ACE_TAO artifact
# #      uses: actions/download-artifact@v2
# #      with:
# #        name: macos-11_0_defaults_ACE_TAO_artifact
# #        path: ACE_TAO
# #    - name: extract ACE_TAO artifact
# #      shell: bash
# #      run: |
# #        cd ACE_TAO
# #        tar xvfJ macos-11_0_defaults_ACE_TAO.tar.xz
# #    - name: checkout OpenDDS
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        path: OpenDDS
# #        submodules: true
# #    - name: configure OpenDDS
# #      run: |
# #        cd OpenDDS
# #        ./configure --std=c++11 --tests --rapidjson --security --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl/
# #    - name: check build configuration
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        tools/scripts/show_build_config.pl
# #    - uses: ammaraskar/gcc-problem-matcher@0.1
# #    - name: build OpenDDS
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        make -j4
# #    - name: create OpenDDS tar.xz artifact
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        rm -rf ACE_TAO
# #        find . -iname "*\.o" | xargs rm
# #        tar cvf ../${{ github.job }}.tar setenv.sh
# #        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
# #        xz -3 ../${{ github.job }}.tar
# #    - name: upload OpenDDS artifact
# #      uses: actions/upload-artifact@v2
# #      with:
# #        name: ${{ github.job }}_artifact
# #        path: ${{ github.job }}.tar.xz

# #  macos-11_0_defaults_security_test:

# #    runs-on: macos-11.0

# #    needs: macos-11_0_defaults_security_build

# #    steps:
# #    - name: install xerces-c
# #      run: |
# #        brew install xerces-c
# #    - name: checkout MPC
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        repository: DOCGroup/MPC
# #        path: MPC
# #    - name: checkout autobuild
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        repository: DOCGroup/autobuild
# #        path: autobuild
# #    - name: checkout ACE_TAO
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        repository: DOCGroup/ACE_TAO
# #        ref: 9eae9c11f1bcd07b48c74820d8cb4c67aca9ef23 # Update to 6_5_13 when available
# #        path: ACE_TAO
# #    - name: download ACE_TAO artifact
# #      uses: actions/download-artifact@v2
# #      with:
# #        name: macos-11_0_defaults_ACE_TAO_artifact
# #        path: ACE_TAO
# #    - name: extract ACE_TAO artifact
# #      shell: bash
# #      run: |
# #        cd ACE_TAO
# #        tar xvfJ macos-11_0_defaults_ACE_TAO.tar.xz
# #    - name: checkout OpenDDS
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        path: OpenDDS
# #        submodules: true
# #    - name: download OpenDDS artifact
# #      uses: actions/download-artifact@v2
# #      with:
# #        name: macos-11_0_defaults_security_build_artifact
# #        path: OpenDDS
# #    - name: extract OpenDDS artifact
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        tar xvfJ macos-11_0_defaults_security_build.tar.xz
# #    - name: check build configuration
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        tools/scripts/show_build_config.pl
# #    - name: run OpenDDS tests
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        mkdir ${{ github.job }}_autobuild_workspace
# #        cd ${{ github.job }}_autobuild_workspace
# #        echo using commit $TRIGGERING_COMMIT for SHA
# #        echo $TRIGGERING_COMMIT >> ./SHA
# #        cat > config.xml <<EOF
# #        <autobuild>
# #        <configuration>
# #        <variable name="log_file" value="output.log"/>
# #        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #        <variable name="project_root" value="$DDS_ROOT"/>
# #        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #        <variable name="junit_xml_output" value="Tests"/>
# #        </configuration>
# #        <command name="log" options="on"/>
# #        <command name="print_os_version"/>
# #        <command name="print_env_vars"/>
# #        <command name="print_ace_config"/>
# #        <command name="print_make_version"/>
# #        <command name="check_compiler" options="gcc"/>
# #        <command name="print_perl_version"/>
# #        <command name="print_autobuild_config"/>
# #        <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config OSX -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config NO_SHMEM -Config DDS_NO_ORBSVCS -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
# #        <command name="log" options="off"/>
# #        <command name="process_logs" options="prettify"/>
# #        </autobuild>
# #        EOF
# #        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
# #    - name: upload autobuild output
# #      uses: actions/upload-artifact@v2
# #      with:
# #        name: ${{ github.job }}_autobuild_output
# #        path: OpenDDS/${{ github.job }}_autobuild_workspace
# #    - name: check results
# #      shell: bash
# #      run: |
# #        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

# #  macos-11_0_defaults_java_no-bit_build:

# #    runs-on: macos-11.0

# #    needs: macos-11_0_defaults_ACE_TAO

# #    steps:
# #    - name: install xerces-c
# #      run: |
# #        brew install xerces-c
# #    - name: checkout MPC
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        repository: DOCGroup/MPC
# #        path: MPC
# #    - name: checkout ACE_TAO
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        repository: DOCGroup/ACE_TAO
# #        ref: 9eae9c11f1bcd07b48c74820d8cb4c67aca9ef23 # Update to 6_5_13 when available
# #        path: ACE_TAO
# #    - name: download ACE_TAO artifact
# #      uses: actions/download-artifact@v2
# #      with:
# #        name: macos-11_0_defaults_ACE_TAO_artifact
# #        path: ACE_TAO
# #    - name: extract ACE_TAO artifact
# #      shell: bash
# #      run: |
# #        cd ACE_TAO
# #        tar xvfJ macos-11_0_defaults_ACE_TAO.tar.xz
# #    - name: checkout OpenDDS
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        path: OpenDDS
# #        submodules: true
# #    - name: configure OpenDDS
# #      run: |
# #        cd OpenDDS
# #        ./configure --std=c++11 --tests --rapidjson --java --no-built-in-topics --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
# #    - name: check build configuration
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        tools/scripts/show_build_config.pl
# #    - uses: ammaraskar/gcc-problem-matcher@0.1
# #    - name: build OpenDDS
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        make -j4
# #    - name: set up TAO Hello test
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        mwc.pl -type gnuace -workers 4 $TAO_ROOT/tests/Hello
# #    - name: build TAO Hello test
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        make -j4 dir=$TAO_ROOT/tests/Hello
# #    - name: set up Modeling tests
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        cd tools/modeling/tests
# #        ./setup.pl
# #        cd -
# #        mwc.pl -type gnuace -workers 4 -features built_in_topics=0 tools/modeling/tests/modeling_tests.mwc
# #    - name: build Modeling tests
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        make -j4 -C tools/modeling/tests
# #    - name: create OpenDDS tar.xz artifact
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        rm -rf ACE_TAO
# #        find . -iname "*\.o" | xargs rm
# #        tar cvf ../${{ github.job }}.tar setenv.sh
# #        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
# #        xz -3 ../${{ github.job }}.tar
# #    - name: upload OpenDDS artifact
# #      uses: actions/upload-artifact@v2
# #      with:
# #        name: ${{ github.job }}_artifact
# #        path: ${{ github.job }}.tar.xz

# #  macos-11_0_defaults_java_no-bit_test:
# #
# #    runs-on: macos-11.0
# #
# #    needs: macos-11_0_defaults_java_no-bit_build
# #
# #    steps:
# #    - name: install xerces-c
# #      run: |
# #        brew install xerces-c
# #    - name: checkout MPC
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        repository: DOCGroup/MPC
# #        path: MPC
# #    - name: checkout autobuild
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        repository: DOCGroup/autobuild
# #        path: autobuild
# #    - name: checkout ACE_TAO
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        repository: DOCGroup/ACE_TAO
# #        ref: 9eae9c11f1bcd07b48c74820d8cb4c67aca9ef23 # Update to 6_5_13 when available
# #        path: ACE_TAO
# #    - name: download ACE_TAO artifact
# #      uses: actions/download-artifact@v2
# #      with:
# #        name: macos-11_0_defaults_ACE_TAO_artifact
# #        path: ACE_TAO
# #    - name: extract ACE_TAO artifact
# #      shell: bash
# #      run: |
# #        cd ACE_TAO
# #        tar xvfJ macos-11_0_defaults_ACE_TAO.tar.xz
# #    - name: checkout OpenDDS
# #      uses: actions/checkout@v2.3.4
# #      with:
# #        path: OpenDDS
# #        submodules: true
# #    - name: download OpenDDS artifact
# #      uses: actions/download-artifact@v2
# #      with:
# #        name: macos-11_0_defaults_java_no-bit_build_artifact
# #        path: OpenDDS
# #    - name: extract OpenDDS artifact
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        tar xvfJ macos-11_0_defaults_java_no-bit_build.tar.xz
# #    - name: check build configuration
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        tools/scripts/show_build_config.pl
# #    - name: run OpenDDS tests
# #      shell: bash
# #      run: |
# #        cd OpenDDS
# #        . setenv.sh
# #        mkdir ${{ github.job }}_autobuild_workspace
# #        cd ${{ github.job }}_autobuild_workspace
# #        echo using commit $TRIGGERING_COMMIT for SHA
# #        echo $TRIGGERING_COMMIT >> ./SHA
# #        cat > config.xml <<EOF
# #        <autobuild>
# #        <configuration>
# #        <variable name="log_file" value="output.log"/>
# #        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #        <variable name="project_root" value="$DDS_ROOT"/>
# #        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #        <variable name="junit_xml_output" value="Tests"/>
# #        </configuration>
# #        <command name="log" options="on"/>
# #        <command name="print_os_version"/>
# #        <command name="print_env_vars"/>
# #        <command name="print_ace_config"/>
# #        <command name="print_make_version"/>
# #        <command name="check_compiler" options="gcc"/>
# #        <command name="print_perl_version"/>
# #        <command name="print_autobuild_config"/>
# #        <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config CXX11 -Config RAPIDJSON -Config NO_SHMEM -Config DDS_NO_ORBSVCS -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst -l tools/modeling/tests/modeling_tests.lst"/>
# #        <command name="log" options="off"/>
# #        <command name="process_logs" options="prettify"/>
# #        </autobuild>
# #        EOF
# #        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
# #    - name: upload autobuild output
# #      uses: actions/upload-artifact@v2
# #      with:
# #        name: ${{ github.job }}_autobuild_output
# #        path: OpenDDS/${{ github.job }}_autobuild_workspace
# #    - name: check results
# #      shell: bash
# #      run: |
# #        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   # macOS 10.15

#   macos-10_15_defaults_ACE_TAO:

#     runs-on: macos-10.15

#     steps:
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces-c
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         brew install xerces-c
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure --optimize --no-debug --std=c++11 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl/
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

#   macos-10_15_defaults_security_build:

#     runs-on: macos-10.15

#     needs: macos-10_15_defaults_ACE_TAO

#     steps:
#     - name: install xerces-c
#       run: |
#         brew install xerces-c
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: macos-10_15_defaults_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ macos-10_15_defaults_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --optimize --no-debug --std=c++11 --tests --rapidjson --security --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl/
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

# #   macos-10_15_defaults_security_test:

# #     runs-on: macos-10.15

# #     needs: macos-10_15_defaults_security_build

# #     steps:
# #     - name: install xerces-c
# #       run: |
# #         brew install xerces-c
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: macos-10_15_defaults_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ macos-10_15_defaults_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: macos-10_15_defaults_security_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ macos-10_15_defaults_security_build.tar.xz
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - name: run OpenDDS tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$DDS_ROOT"/>
# #         <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config OSX -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config NO_SHMEM -Config DDS_NO_ORBSVCS -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS/${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#   macos-10_15_defaults_java_ACE_TAO:

#     runs-on: macos-10.15

#     steps:
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: OpenDDS/ACE_TAO
#     - name: get ACE_TAO commit
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         export ACE_COMMIT=$(git rev-parse HEAD)
#         echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#     - name: Cache Artifact
#       id: cache-artifact
#       uses: actions/cache@v2.1.4
#       with:
#         path: ${{ github.job }}.tar.xz
#         key: ${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#     - name: install xerces-c
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         brew install xerces-c
#     - name: checkout MPC
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: configure OpenDDS
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         ./configure  --no-inline --std=c++11 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl/
#     - name: build ACE and TAO
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd ACE_TAO/ACE
#         make -j4
#         cd ../TAO
#         make -j4
#     - name: create ACE_TAO tar.xz artifact
#       if: steps.cache-artifact.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         cd OpenDDS/ACE_TAO
#         perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#         xz -3 ../../${{ github.job }}.tar
#     - name: upload ACE_TAO artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz


#   macos-10_15_defaults_java_no-bit_build:

#     runs-on: macos-10.15

#     needs: macos-10_15_defaults_java_ACE_TAO

#     steps:
#     - name: install xerces-c
#       run: |
#         brew install xerces-c
#     - name: checkout MPC
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/MPC
#         path: MPC
#     - name: checkout ACE_TAO
#       uses: actions/checkout@v2.3.4
#       with:
#         repository: DOCGroup/ACE_TAO
#         ref: ace6tao2
#         path: ACE_TAO
#     - name: download ACE_TAO artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: macos-10_15_defaults_java_ACE_TAO_artifact
#         path: ACE_TAO
#     - name: extract ACE_TAO artifact
#       shell: bash
#       run: |
#         cd ACE_TAO
#         tar xvfJ macos-10_15_defaults_java_ACE_TAO.tar.xz
#     - name: checkout OpenDDS
#       uses: actions/checkout@v2.3.4
#       with:
#         path: OpenDDS
#         submodules: true
#     - name: configure OpenDDS
#       run: |
#         cd OpenDDS
#         ./configure --no-inline --std=c++11 --tests --rapidjson --java --no-built-in-topics --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#     - name: check build configuration
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         tools/scripts/show_build_config.pl
#     - uses: ammaraskar/gcc-problem-matcher@0.1
#     - name: build OpenDDS
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4
#     - name: set up TAO Hello test
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         mwc.pl -type gnuace -workers 4 $TAO_ROOT/tests/Hello
#     - name: build TAO Hello test
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4 dir=$TAO_ROOT/tests/Hello
#     - name: set up Modeling tests
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         cd tools/modeling/tests
#         ./setup.pl
#         cd -
#         mwc.pl -type gnuace -workers 4 -features built_in_topics=0 tools/modeling/tests/modeling_tests.mwc
#     - name: build Modeling tests
#       shell: bash
#       run: |
#         cd OpenDDS
#         . setenv.sh
#         make -j4 -C tools/modeling/tests
#     - name: create OpenDDS tar.xz artifact
#       shell: bash
#       run: |
#         cd OpenDDS
#         rm -rf ACE_TAO
#         find . -iname "*\.o" | xargs rm
#         tar cvf ../${{ github.job }}.tar setenv.sh
#         git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#         xz -3 ../${{ github.job }}.tar
#     - name: upload OpenDDS artifact
#       uses: actions/upload-artifact@v2
#       with:
#         name: ${{ github.job }}_artifact
#         path: ${{ github.job }}.tar.xz

# #   macos-10_15_defaults_java_no-bit_test:

# #     runs-on: macos-10.15

# #     needs: macos-10_15_defaults_java_no-bit_build

# #     steps:
# #     - name: install xerces-c
# #       run: |
# #         brew install xerces-c
# #     - name: checkout MPC
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/MPC
# #         path: MPC
# #     - name: checkout autobuild
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/autobuild
# #         path: autobuild
# #     - name: checkout ACE_TAO
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         repository: DOCGroup/ACE_TAO
# #         ref: ace6tao2
# #         path: ACE_TAO
# #     - name: download ACE_TAO artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: macos-10_15_defaults_java_ACE_TAO_artifact
# #         path: ACE_TAO
# #     - name: extract ACE_TAO artifact
# #       shell: bash
# #       run: |
# #         cd ACE_TAO
# #         tar xvfJ macos-10_15_defaults_java_ACE_TAO.tar.xz
# #     - name: checkout OpenDDS
# #       uses: actions/checkout@v2.3.4
# #       with:
# #         path: OpenDDS
# #         submodules: true
# #     - name: download OpenDDS artifact
# #       uses: actions/download-artifact@v2
# #       with:
# #         name: macos-10_15_defaults_java_no-bit_build_artifact
# #         path: OpenDDS
# #     - name: extract OpenDDS artifact
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         tar xvfJ macos-10_15_defaults_java_no-bit_build.tar.xz
# #     - name: check build configuration
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         tools/scripts/show_build_config.pl
# #     - name: run OpenDDS tests
# #       shell: bash
# #       run: |
# #         cd OpenDDS
# #         . setenv.sh
# #         mkdir ${{ github.job }}_autobuild_workspace
# #         cd ${{ github.job }}_autobuild_workspace
# #         echo using commit $TRIGGERING_COMMIT for SHA
# #         echo $TRIGGERING_COMMIT >> ./SHA
# #         cat > config.xml <<EOF
# #         <autobuild>
# #         <configuration>
# #         <variable name="log_file" value="output.log"/>
# #         <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="project_root" value="$DDS_ROOT"/>
# #         <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
# #         <variable name="junit_xml_output" value="Tests"/>
# #         </configuration>
# #         <command name="log" options="on"/>
# #         <command name="print_os_version"/>
# #         <command name="print_env_vars"/>
# #         <command name="print_ace_config"/>
# #         <command name="print_make_version"/>
# #         <command name="check_compiler" options="gcc"/>
# #         <command name="print_perl_version"/>
# #         <command name="print_autobuild_config"/>
# #         <command name="auto_run_tests" options="dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config CXX11 -Config RAPIDJSON -Config NO_SHMEM -Config DDS_NO_ORBSVCS -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst -l tools/modeling/tests/modeling_tests.lst"/>
# #         <command name="log" options="off"/>
# #         <command name="process_logs" options="prettify"/>
# #         </autobuild>
# #         EOF
# #         $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
# #     - name: upload autobuild output
# #       uses: actions/upload-artifact@v2
# #       with:
# #         name: ${{ github.job }}_autobuild_output
# #         path: OpenDDS/${{ github.job }}_autobuild_workspace
# #     - name: check results
# #       shell: bash
# #       run: |
# #         cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
# #         if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi
